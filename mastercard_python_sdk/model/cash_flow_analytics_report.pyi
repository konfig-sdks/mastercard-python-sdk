# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class CashFlowAnalyticsReport(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Cash Flow Analytics report data as JSON
    """


    class MetaOapg:
        required = {
            "reportHeader",
            "customerId",
            "title",
        }
        
        class properties:
            title = schemas.StrSchema
            customerId = schemas.Int64Schema
        
            @staticmethod
            def reportHeader() -> typing.Type['ObbReportHeader']:
                return ObbReportHeader
            
            
            class accountResults(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CashFlowAnalyticsAccountResult']:
                        return CashFlowAnalyticsAccountResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CashFlowAnalyticsAccountResult'], typing.List['CashFlowAnalyticsAccountResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accountResults':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CashFlowAnalyticsAccountResult':
                    return super().__getitem__(i)
            businessId = schemas.IntSchema
        
            @staticmethod
            def businessSummary() -> typing.Type['CashFlowAnalyticsBusinessSummary']:
                return CashFlowAnalyticsBusinessSummary
            
            
            class requesterName(
                schemas.StrSchema
            ):
                pass
            totalRevenue = schemas.NumberSchema
            __annotations__ = {
                "title": title,
                "customerId": customerId,
                "reportHeader": reportHeader,
                "accountResults": accountResults,
                "businessId": businessId,
                "businessSummary": businessSummary,
                "requesterName": requesterName,
                "totalRevenue": totalRevenue,
            }
    
    reportHeader: 'ObbReportHeader'
    customerId: MetaOapg.properties.customerId
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportHeader"]) -> 'ObbReportHeader': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountResults"]) -> MetaOapg.properties.accountResults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessId"]) -> MetaOapg.properties.businessId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessSummary"]) -> 'CashFlowAnalyticsBusinessSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requesterName"]) -> MetaOapg.properties.requesterName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalRevenue"]) -> MetaOapg.properties.totalRevenue: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "customerId", "reportHeader", "accountResults", "businessId", "businessSummary", "requesterName", "totalRevenue", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportHeader"]) -> 'ObbReportHeader': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountResults"]) -> typing.Union[MetaOapg.properties.accountResults, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessId"]) -> typing.Union[MetaOapg.properties.businessId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessSummary"]) -> typing.Union['CashFlowAnalyticsBusinessSummary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requesterName"]) -> typing.Union[MetaOapg.properties.requesterName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalRevenue"]) -> typing.Union[MetaOapg.properties.totalRevenue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "customerId", "reportHeader", "accountResults", "businessId", "businessSummary", "requesterName", "totalRevenue", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reportHeader: 'ObbReportHeader',
        customerId: typing.Union[MetaOapg.properties.customerId, decimal.Decimal, int, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        accountResults: typing.Union[MetaOapg.properties.accountResults, list, tuple, schemas.Unset] = schemas.unset,
        businessId: typing.Union[MetaOapg.properties.businessId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        businessSummary: typing.Union['CashFlowAnalyticsBusinessSummary', schemas.Unset] = schemas.unset,
        requesterName: typing.Union[MetaOapg.properties.requesterName, str, schemas.Unset] = schemas.unset,
        totalRevenue: typing.Union[MetaOapg.properties.totalRevenue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CashFlowAnalyticsReport':
        return super().__new__(
            cls,
            *args,
            reportHeader=reportHeader,
            customerId=customerId,
            title=title,
            accountResults=accountResults,
            businessId=businessId,
            businessSummary=businessSummary,
            requesterName=requesterName,
            totalRevenue=totalRevenue,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.cash_flow_analytics_account_result import CashFlowAnalyticsAccountResult
from mastercard_python_sdk.model.cash_flow_analytics_business_summary import CashFlowAnalyticsBusinessSummary
from mastercard_python_sdk.model.obb_report_header import ObbReportHeader
