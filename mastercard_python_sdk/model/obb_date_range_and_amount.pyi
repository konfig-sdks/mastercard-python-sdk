# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class ObbDateRangeAndAmount(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "periodBeginDate",
            "period",
            "periodEndDate",
        }
        
        class properties:
            
            
            class period(
                schemas.StrSchema
            ):
                pass
            
            
            class periodBeginDate(
                schemas.StrSchema
            ):
                pass
            
            
            class periodEndDate(
                schemas.StrSchema
            ):
                pass
            amount = schemas.NumberSchema
            __annotations__ = {
                "period": period,
                "periodBeginDate": periodBeginDate,
                "periodEndDate": periodEndDate,
                "amount": amount,
            }
    
    periodBeginDate: MetaOapg.properties.periodBeginDate
    period: MetaOapg.properties.period
    periodEndDate: MetaOapg.properties.periodEndDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period"]) -> MetaOapg.properties.period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodBeginDate"]) -> MetaOapg.properties.periodBeginDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodEndDate"]) -> MetaOapg.properties.periodEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["period", "periodBeginDate", "periodEndDate", "amount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period"]) -> MetaOapg.properties.period: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodBeginDate"]) -> MetaOapg.properties.periodBeginDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodEndDate"]) -> MetaOapg.properties.periodEndDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["period", "periodBeginDate", "periodEndDate", "amount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        periodBeginDate: typing.Union[MetaOapg.properties.periodBeginDate, str, ],
        period: typing.Union[MetaOapg.properties.period, str, ],
        periodEndDate: typing.Union[MetaOapg.properties.periodEndDate, str, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObbDateRangeAndAmount':
        return super().__new__(
            cls,
            *args,
            periodBeginDate=periodBeginDate,
            period=period,
            periodEndDate=periodEndDate,
            amount=amount,
            _configuration=_configuration,
            **kwargs,
        )
