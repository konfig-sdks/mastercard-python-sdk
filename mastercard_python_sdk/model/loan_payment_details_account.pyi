# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class LoanPaymentDetailsAccount(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "accountId",
            "accountPaymentNumber",
            "accountPaymentAddress",
            "accountNumber",
        }
        
        class properties:
            accountId = schemas.StrSchema
            accountNumber = schemas.StrSchema
            accountPaymentNumber = schemas.StrSchema
            accountPaymentAddress = schemas.StrSchema
            accountFuturePayoffAmount = schemas.NumberSchema
            accountFuturePayoffDate = schemas.DateTimeSchema
            
            
            class groupDetail(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LoanPaymentDetailsGroup']:
                        return LoanPaymentDetailsGroup
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LoanPaymentDetailsGroup'], typing.List['LoanPaymentDetailsGroup']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groupDetail':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LoanPaymentDetailsGroup':
                    return super().__getitem__(i)
            
            
            class loanDetail(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LoanPaymentDetailsLoan']:
                        return LoanPaymentDetailsLoan
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LoanPaymentDetailsLoan'], typing.List['LoanPaymentDetailsLoan']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'loanDetail':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LoanPaymentDetailsLoan':
                    return super().__getitem__(i)
            __annotations__ = {
                "accountId": accountId,
                "accountNumber": accountNumber,
                "accountPaymentNumber": accountPaymentNumber,
                "accountPaymentAddress": accountPaymentAddress,
                "accountFuturePayoffAmount": accountFuturePayoffAmount,
                "accountFuturePayoffDate": accountFuturePayoffDate,
                "groupDetail": groupDetail,
                "loanDetail": loanDetail,
            }
    
    accountId: MetaOapg.properties.accountId
    accountPaymentNumber: MetaOapg.properties.accountPaymentNumber
    accountPaymentAddress: MetaOapg.properties.accountPaymentAddress
    accountNumber: MetaOapg.properties.accountNumber
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountNumber"]) -> MetaOapg.properties.accountNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountPaymentNumber"]) -> MetaOapg.properties.accountPaymentNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountPaymentAddress"]) -> MetaOapg.properties.accountPaymentAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountFuturePayoffAmount"]) -> MetaOapg.properties.accountFuturePayoffAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountFuturePayoffDate"]) -> MetaOapg.properties.accountFuturePayoffDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupDetail"]) -> MetaOapg.properties.groupDetail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanDetail"]) -> MetaOapg.properties.loanDetail: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountId", "accountNumber", "accountPaymentNumber", "accountPaymentAddress", "accountFuturePayoffAmount", "accountFuturePayoffDate", "groupDetail", "loanDetail", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountNumber"]) -> MetaOapg.properties.accountNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountPaymentNumber"]) -> MetaOapg.properties.accountPaymentNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountPaymentAddress"]) -> MetaOapg.properties.accountPaymentAddress: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountFuturePayoffAmount"]) -> typing.Union[MetaOapg.properties.accountFuturePayoffAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountFuturePayoffDate"]) -> typing.Union[MetaOapg.properties.accountFuturePayoffDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupDetail"]) -> typing.Union[MetaOapg.properties.groupDetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanDetail"]) -> typing.Union[MetaOapg.properties.loanDetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountId", "accountNumber", "accountPaymentNumber", "accountPaymentAddress", "accountFuturePayoffAmount", "accountFuturePayoffDate", "groupDetail", "loanDetail", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accountId: typing.Union[MetaOapg.properties.accountId, str, ],
        accountPaymentNumber: typing.Union[MetaOapg.properties.accountPaymentNumber, str, ],
        accountPaymentAddress: typing.Union[MetaOapg.properties.accountPaymentAddress, str, ],
        accountNumber: typing.Union[MetaOapg.properties.accountNumber, str, ],
        accountFuturePayoffAmount: typing.Union[MetaOapg.properties.accountFuturePayoffAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        accountFuturePayoffDate: typing.Union[MetaOapg.properties.accountFuturePayoffDate, str, datetime, schemas.Unset] = schemas.unset,
        groupDetail: typing.Union[MetaOapg.properties.groupDetail, list, tuple, schemas.Unset] = schemas.unset,
        loanDetail: typing.Union[MetaOapg.properties.loanDetail, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LoanPaymentDetailsAccount':
        return super().__new__(
            cls,
            *args,
            accountId=accountId,
            accountPaymentNumber=accountPaymentNumber,
            accountPaymentAddress=accountPaymentAddress,
            accountNumber=accountNumber,
            accountFuturePayoffAmount=accountFuturePayoffAmount,
            accountFuturePayoffDate=accountFuturePayoffDate,
            groupDetail=groupDetail,
            loanDetail=loanDetail,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.loan_payment_details_group import LoanPaymentDetailsGroup
from mastercard_python_sdk.model.loan_payment_details_loan import LoanPaymentDetailsLoan
