# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class ReportTransactionBase2(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            normalizedPayee = schemas.StrSchema
            institutionTransactionId = schemas.StrSchema
            category = schemas.StrSchema
            type = schemas.StrSchema
            securityType = schemas.StrSchema
            symbol = schemas.StrSchema
            commission = schemas.NumberSchema
            __annotations__ = {
                "normalizedPayee": normalizedPayee,
                "institutionTransactionId": institutionTransactionId,
                "category": category,
                "type": type,
                "securityType": securityType,
                "symbol": symbol,
                "commission": commission,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normalizedPayee"]) -> MetaOapg.properties.normalizedPayee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institutionTransactionId"]) -> MetaOapg.properties.institutionTransactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityType"]) -> MetaOapg.properties.securityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commission"]) -> MetaOapg.properties.commission: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["normalizedPayee", "institutionTransactionId", "category", "type", "securityType", "symbol", "commission", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normalizedPayee"]) -> typing.Union[MetaOapg.properties.normalizedPayee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institutionTransactionId"]) -> typing.Union[MetaOapg.properties.institutionTransactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityType"]) -> typing.Union[MetaOapg.properties.securityType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commission"]) -> typing.Union[MetaOapg.properties.commission, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["normalizedPayee", "institutionTransactionId", "category", "type", "securityType", "symbol", "commission", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        normalizedPayee: typing.Union[MetaOapg.properties.normalizedPayee, str, schemas.Unset] = schemas.unset,
        institutionTransactionId: typing.Union[MetaOapg.properties.institutionTransactionId, str, schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        securityType: typing.Union[MetaOapg.properties.securityType, str, schemas.Unset] = schemas.unset,
        symbol: typing.Union[MetaOapg.properties.symbol, str, schemas.Unset] = schemas.unset,
        commission: typing.Union[MetaOapg.properties.commission, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportTransactionBase2':
        return super().__new__(
            cls,
            *args,
            normalizedPayee=normalizedPayee,
            institutionTransactionId=institutionTransactionId,
            category=category,
            type=type,
            securityType=securityType,
            symbol=symbol,
            commission=commission,
            _configuration=_configuration,
            **kwargs,
        )
