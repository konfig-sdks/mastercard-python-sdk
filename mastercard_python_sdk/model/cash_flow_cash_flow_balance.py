# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class CashFlowCashFlowBalance(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "minDailyBalance",
            "maxDailyBalance",
            "sixMonthAverageDailyBalance",
            "twoMonthStandardDeviationOfDailyBalance",
            "numberOfDaysPositiveBalance",
            "twelveMonthAverageDailyBalance",
            "monthlyCashFlowBalances",
            "twelveMonthStandardDeviationOfDailyBalance",
            "twoMonthAverageDailyBalance",
        }
        
        class properties:
            
            
            class monthlyCashFlowBalances(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CashFlowMonthlyCashFlowBalances']:
                        return CashFlowMonthlyCashFlowBalances
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CashFlowMonthlyCashFlowBalances'], typing.List['CashFlowMonthlyCashFlowBalances']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'monthlyCashFlowBalances':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CashFlowMonthlyCashFlowBalances':
                    return super().__getitem__(i)
            minDailyBalance = schemas.NumberSchema
            maxDailyBalance = schemas.NumberSchema
            twelveMonthAverageDailyBalance = schemas.NumberSchema
            sixMonthAverageDailyBalance = schemas.NumberSchema
            twoMonthAverageDailyBalance = schemas.NumberSchema
            twelveMonthStandardDeviationOfDailyBalance = schemas.StrSchema
            twoMonthStandardDeviationOfDailyBalance = schemas.StrSchema
            numberOfDaysPositiveBalance = schemas.StrSchema
            sixMonthStandardDeviationOfDailyBalance = schemas.StrSchema
            numberDaysNegativeBalance = schemas.StrSchema
            __annotations__ = {
                "monthlyCashFlowBalances": monthlyCashFlowBalances,
                "minDailyBalance": minDailyBalance,
                "maxDailyBalance": maxDailyBalance,
                "twelveMonthAverageDailyBalance": twelveMonthAverageDailyBalance,
                "sixMonthAverageDailyBalance": sixMonthAverageDailyBalance,
                "twoMonthAverageDailyBalance": twoMonthAverageDailyBalance,
                "twelveMonthStandardDeviationOfDailyBalance": twelveMonthStandardDeviationOfDailyBalance,
                "twoMonthStandardDeviationOfDailyBalance": twoMonthStandardDeviationOfDailyBalance,
                "numberOfDaysPositiveBalance": numberOfDaysPositiveBalance,
                "sixMonthStandardDeviationOfDailyBalance": sixMonthStandardDeviationOfDailyBalance,
                "numberDaysNegativeBalance": numberDaysNegativeBalance,
            }
    
    minDailyBalance: MetaOapg.properties.minDailyBalance
    maxDailyBalance: MetaOapg.properties.maxDailyBalance
    sixMonthAverageDailyBalance: MetaOapg.properties.sixMonthAverageDailyBalance
    twoMonthStandardDeviationOfDailyBalance: MetaOapg.properties.twoMonthStandardDeviationOfDailyBalance
    numberOfDaysPositiveBalance: MetaOapg.properties.numberOfDaysPositiveBalance
    twelveMonthAverageDailyBalance: MetaOapg.properties.twelveMonthAverageDailyBalance
    monthlyCashFlowBalances: MetaOapg.properties.monthlyCashFlowBalances
    twelveMonthStandardDeviationOfDailyBalance: MetaOapg.properties.twelveMonthStandardDeviationOfDailyBalance
    twoMonthAverageDailyBalance: MetaOapg.properties.twoMonthAverageDailyBalance
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyCashFlowBalances"]) -> MetaOapg.properties.monthlyCashFlowBalances: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minDailyBalance"]) -> MetaOapg.properties.minDailyBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxDailyBalance"]) -> MetaOapg.properties.maxDailyBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twelveMonthAverageDailyBalance"]) -> MetaOapg.properties.twelveMonthAverageDailyBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sixMonthAverageDailyBalance"]) -> MetaOapg.properties.sixMonthAverageDailyBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twoMonthAverageDailyBalance"]) -> MetaOapg.properties.twoMonthAverageDailyBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twelveMonthStandardDeviationOfDailyBalance"]) -> MetaOapg.properties.twelveMonthStandardDeviationOfDailyBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twoMonthStandardDeviationOfDailyBalance"]) -> MetaOapg.properties.twoMonthStandardDeviationOfDailyBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfDaysPositiveBalance"]) -> MetaOapg.properties.numberOfDaysPositiveBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sixMonthStandardDeviationOfDailyBalance"]) -> MetaOapg.properties.sixMonthStandardDeviationOfDailyBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberDaysNegativeBalance"]) -> MetaOapg.properties.numberDaysNegativeBalance: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["monthlyCashFlowBalances", "minDailyBalance", "maxDailyBalance", "twelveMonthAverageDailyBalance", "sixMonthAverageDailyBalance", "twoMonthAverageDailyBalance", "twelveMonthStandardDeviationOfDailyBalance", "twoMonthStandardDeviationOfDailyBalance", "numberOfDaysPositiveBalance", "sixMonthStandardDeviationOfDailyBalance", "numberDaysNegativeBalance", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyCashFlowBalances"]) -> MetaOapg.properties.monthlyCashFlowBalances: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minDailyBalance"]) -> MetaOapg.properties.minDailyBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxDailyBalance"]) -> MetaOapg.properties.maxDailyBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twelveMonthAverageDailyBalance"]) -> MetaOapg.properties.twelveMonthAverageDailyBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sixMonthAverageDailyBalance"]) -> MetaOapg.properties.sixMonthAverageDailyBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twoMonthAverageDailyBalance"]) -> MetaOapg.properties.twoMonthAverageDailyBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twelveMonthStandardDeviationOfDailyBalance"]) -> MetaOapg.properties.twelveMonthStandardDeviationOfDailyBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twoMonthStandardDeviationOfDailyBalance"]) -> MetaOapg.properties.twoMonthStandardDeviationOfDailyBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfDaysPositiveBalance"]) -> MetaOapg.properties.numberOfDaysPositiveBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sixMonthStandardDeviationOfDailyBalance"]) -> typing.Union[MetaOapg.properties.sixMonthStandardDeviationOfDailyBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberDaysNegativeBalance"]) -> typing.Union[MetaOapg.properties.numberDaysNegativeBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["monthlyCashFlowBalances", "minDailyBalance", "maxDailyBalance", "twelveMonthAverageDailyBalance", "sixMonthAverageDailyBalance", "twoMonthAverageDailyBalance", "twelveMonthStandardDeviationOfDailyBalance", "twoMonthStandardDeviationOfDailyBalance", "numberOfDaysPositiveBalance", "sixMonthStandardDeviationOfDailyBalance", "numberDaysNegativeBalance", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        minDailyBalance: typing.Union[MetaOapg.properties.minDailyBalance, decimal.Decimal, int, float, ],
        maxDailyBalance: typing.Union[MetaOapg.properties.maxDailyBalance, decimal.Decimal, int, float, ],
        sixMonthAverageDailyBalance: typing.Union[MetaOapg.properties.sixMonthAverageDailyBalance, decimal.Decimal, int, float, ],
        twoMonthStandardDeviationOfDailyBalance: typing.Union[MetaOapg.properties.twoMonthStandardDeviationOfDailyBalance, str, ],
        numberOfDaysPositiveBalance: typing.Union[MetaOapg.properties.numberOfDaysPositiveBalance, str, ],
        twelveMonthAverageDailyBalance: typing.Union[MetaOapg.properties.twelveMonthAverageDailyBalance, decimal.Decimal, int, float, ],
        monthlyCashFlowBalances: typing.Union[MetaOapg.properties.monthlyCashFlowBalances, list, tuple, ],
        twelveMonthStandardDeviationOfDailyBalance: typing.Union[MetaOapg.properties.twelveMonthStandardDeviationOfDailyBalance, str, ],
        twoMonthAverageDailyBalance: typing.Union[MetaOapg.properties.twoMonthAverageDailyBalance, decimal.Decimal, int, float, ],
        sixMonthStandardDeviationOfDailyBalance: typing.Union[MetaOapg.properties.sixMonthStandardDeviationOfDailyBalance, str, schemas.Unset] = schemas.unset,
        numberDaysNegativeBalance: typing.Union[MetaOapg.properties.numberDaysNegativeBalance, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CashFlowCashFlowBalance':
        return super().__new__(
            cls,
            *args,
            minDailyBalance=minDailyBalance,
            maxDailyBalance=maxDailyBalance,
            sixMonthAverageDailyBalance=sixMonthAverageDailyBalance,
            twoMonthStandardDeviationOfDailyBalance=twoMonthStandardDeviationOfDailyBalance,
            numberOfDaysPositiveBalance=numberOfDaysPositiveBalance,
            twelveMonthAverageDailyBalance=twelveMonthAverageDailyBalance,
            monthlyCashFlowBalances=monthlyCashFlowBalances,
            twelveMonthStandardDeviationOfDailyBalance=twelveMonthStandardDeviationOfDailyBalance,
            twoMonthAverageDailyBalance=twoMonthAverageDailyBalance,
            sixMonthStandardDeviationOfDailyBalance=sixMonthStandardDeviationOfDailyBalance,
            numberDaysNegativeBalance=numberDaysNegativeBalance,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.cash_flow_monthly_cash_flow_balances import CashFlowMonthlyCashFlowBalances
