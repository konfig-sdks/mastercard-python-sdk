# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class PrequalificationReportAssetSummary(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "beginningBalance",
            "twoMonthAverage",
            "currentBalance",
        }
        
        class properties:
            currentBalance = schemas.NumberSchema
            twoMonthAverage = schemas.NumberSchema
            beginningBalance = schemas.NumberSchema
            type = schemas.StrSchema
            availableBalance = schemas.NumberSchema
            sixMonthAverage = schemas.NumberSchema
            __annotations__ = {
                "currentBalance": currentBalance,
                "twoMonthAverage": twoMonthAverage,
                "beginningBalance": beginningBalance,
                "type": type,
                "availableBalance": availableBalance,
                "sixMonthAverage": sixMonthAverage,
            }
    
    beginningBalance: MetaOapg.properties.beginningBalance
    twoMonthAverage: MetaOapg.properties.twoMonthAverage
    currentBalance: MetaOapg.properties.currentBalance
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentBalance"]) -> MetaOapg.properties.currentBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twoMonthAverage"]) -> MetaOapg.properties.twoMonthAverage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beginningBalance"]) -> MetaOapg.properties.beginningBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableBalance"]) -> MetaOapg.properties.availableBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sixMonthAverage"]) -> MetaOapg.properties.sixMonthAverage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["currentBalance", "twoMonthAverage", "beginningBalance", "type", "availableBalance", "sixMonthAverage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentBalance"]) -> MetaOapg.properties.currentBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twoMonthAverage"]) -> MetaOapg.properties.twoMonthAverage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beginningBalance"]) -> MetaOapg.properties.beginningBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableBalance"]) -> typing.Union[MetaOapg.properties.availableBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sixMonthAverage"]) -> typing.Union[MetaOapg.properties.sixMonthAverage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["currentBalance", "twoMonthAverage", "beginningBalance", "type", "availableBalance", "sixMonthAverage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        beginningBalance: typing.Union[MetaOapg.properties.beginningBalance, decimal.Decimal, int, float, ],
        twoMonthAverage: typing.Union[MetaOapg.properties.twoMonthAverage, decimal.Decimal, int, float, ],
        currentBalance: typing.Union[MetaOapg.properties.currentBalance, decimal.Decimal, int, float, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        availableBalance: typing.Union[MetaOapg.properties.availableBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sixMonthAverage: typing.Union[MetaOapg.properties.sixMonthAverage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PrequalificationReportAssetSummary':
        return super().__new__(
            cls,
            *args,
            beginningBalance=beginningBalance,
            twoMonthAverage=twoMonthAverage,
            currentBalance=currentBalance,
            type=type,
            availableBalance=availableBalance,
            sixMonthAverage=sixMonthAverage,
            _configuration=_configuration,
            **kwargs,
        )
