# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class Customers(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A list of customers
    """


    class MetaOapg:
        required = {
            "moreAvailable",
            "customers",
            "displaying",
        }
        
        class properties:
            displaying = schemas.IntSchema
            moreAvailable = schemas.BoolSchema
            
            
            class customers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Customer']:
                        return Customer
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Customer'], typing.List['Customer']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Customer':
                    return super().__getitem__(i)
            found = schemas.IntSchema
            __annotations__ = {
                "displaying": displaying,
                "moreAvailable": moreAvailable,
                "customers": customers,
                "found": found,
            }
    
    moreAvailable: MetaOapg.properties.moreAvailable
    customers: MetaOapg.properties.customers
    displaying: MetaOapg.properties.displaying
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displaying"]) -> MetaOapg.properties.displaying: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["moreAvailable"]) -> MetaOapg.properties.moreAvailable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customers"]) -> MetaOapg.properties.customers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["found"]) -> MetaOapg.properties.found: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["displaying", "moreAvailable", "customers", "found", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displaying"]) -> MetaOapg.properties.displaying: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["moreAvailable"]) -> MetaOapg.properties.moreAvailable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customers"]) -> MetaOapg.properties.customers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["found"]) -> typing.Union[MetaOapg.properties.found, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["displaying", "moreAvailable", "customers", "found", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        moreAvailable: typing.Union[MetaOapg.properties.moreAvailable, bool, ],
        customers: typing.Union[MetaOapg.properties.customers, list, tuple, ],
        displaying: typing.Union[MetaOapg.properties.displaying, decimal.Decimal, int, ],
        found: typing.Union[MetaOapg.properties.found, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Customers':
        return super().__new__(
            cls,
            *args,
            moreAvailable=moreAvailable,
            customers=customers,
            displaying=displaying,
            found=found,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.customer import Customer
