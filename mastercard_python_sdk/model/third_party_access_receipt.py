# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class ThirdPartyAccessReceipt(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An object representing consent receipt
    """


    class MetaOapg:
        
        class properties:
            version = schemas.StrSchema
            profile = schemas.IntSchema
            receiptId = schemas.StrSchema
            customerId = schemas.StrSchema
            partnerId = schemas.StrSchema
            
            
            class products(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ThirdPartyAccessProduct']:
                        return ThirdPartyAccessProduct
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ThirdPartyAccessProduct'], typing.List['ThirdPartyAccessProduct']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'products':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ThirdPartyAccessProduct':
                    return super().__getitem__(i)
        
            @staticmethod
            def provenance() -> typing.Type['ThirdPartyAccessProvenance']:
                return ThirdPartyAccessProvenance
            timestamp = schemas.DateTimeSchema
            __annotations__ = {
                "version": version,
                "profile": profile,
                "receiptId": receiptId,
                "customerId": customerId,
                "partnerId": partnerId,
                "products": products,
                "provenance": provenance,
                "timestamp": timestamp,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile"]) -> MetaOapg.properties.profile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiptId"]) -> MetaOapg.properties.receiptId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerId"]) -> MetaOapg.properties.partnerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["products"]) -> MetaOapg.properties.products: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provenance"]) -> 'ThirdPartyAccessProvenance': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "profile", "receiptId", "customerId", "partnerId", "products", "provenance", "timestamp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile"]) -> typing.Union[MetaOapg.properties.profile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiptId"]) -> typing.Union[MetaOapg.properties.receiptId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> typing.Union[MetaOapg.properties.customerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerId"]) -> typing.Union[MetaOapg.properties.partnerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["products"]) -> typing.Union[MetaOapg.properties.products, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provenance"]) -> typing.Union['ThirdPartyAccessProvenance', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "profile", "receiptId", "customerId", "partnerId", "products", "provenance", "timestamp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        profile: typing.Union[MetaOapg.properties.profile, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        receiptId: typing.Union[MetaOapg.properties.receiptId, str, schemas.Unset] = schemas.unset,
        customerId: typing.Union[MetaOapg.properties.customerId, str, schemas.Unset] = schemas.unset,
        partnerId: typing.Union[MetaOapg.properties.partnerId, str, schemas.Unset] = schemas.unset,
        products: typing.Union[MetaOapg.properties.products, list, tuple, schemas.Unset] = schemas.unset,
        provenance: typing.Union['ThirdPartyAccessProvenance', schemas.Unset] = schemas.unset,
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ThirdPartyAccessReceipt':
        return super().__new__(
            cls,
            *args,
            version=version,
            profile=profile,
            receiptId=receiptId,
            customerId=customerId,
            partnerId=partnerId,
            products=products,
            provenance=provenance,
            timestamp=timestamp,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.third_party_access_product import ThirdPartyAccessProduct
from mastercard_python_sdk.model.third_party_access_provenance import ThirdPartyAccessProvenance
