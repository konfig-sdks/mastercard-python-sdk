# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class ThirdPartyAccessProduct(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Product for which access token to be generated
    """


    class MetaOapg:
        required = {
            "accountId",
            "product",
            "accessPeriod",
        }
        
        class properties:
            product = schemas.StrSchema
            accountId = schemas.StrSchema
        
            @staticmethod
            def accessPeriod() -> typing.Type['ThirdPartyAccessPeriod']:
                return ThirdPartyAccessPeriod
            payorId = schemas.StrSchema
            maxCalls = schemas.IntSchema
            __annotations__ = {
                "product": product,
                "accountId": accountId,
                "accessPeriod": accessPeriod,
                "payorId": payorId,
                "maxCalls": maxCalls,
            }
    
    accountId: MetaOapg.properties.accountId
    product: MetaOapg.properties.product
    accessPeriod: 'ThirdPartyAccessPeriod'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product"]) -> MetaOapg.properties.product: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessPeriod"]) -> 'ThirdPartyAccessPeriod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payorId"]) -> MetaOapg.properties.payorId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxCalls"]) -> MetaOapg.properties.maxCalls: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["product", "accountId", "accessPeriod", "payorId", "maxCalls", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product"]) -> MetaOapg.properties.product: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessPeriod"]) -> 'ThirdPartyAccessPeriod': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payorId"]) -> typing.Union[MetaOapg.properties.payorId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxCalls"]) -> typing.Union[MetaOapg.properties.maxCalls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["product", "accountId", "accessPeriod", "payorId", "maxCalls", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accountId: typing.Union[MetaOapg.properties.accountId, str, ],
        product: typing.Union[MetaOapg.properties.product, str, ],
        accessPeriod: 'ThirdPartyAccessPeriod',
        payorId: typing.Union[MetaOapg.properties.payorId, str, schemas.Unset] = schemas.unset,
        maxCalls: typing.Union[MetaOapg.properties.maxCalls, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ThirdPartyAccessProduct':
        return super().__new__(
            cls,
            *args,
            accountId=accountId,
            product=product,
            accessPeriod=accessPeriod,
            payorId=payorId,
            maxCalls=maxCalls,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.third_party_access_period import ThirdPartyAccessPeriod
