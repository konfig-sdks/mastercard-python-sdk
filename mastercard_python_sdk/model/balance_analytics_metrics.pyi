# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class BalanceAnalyticsMetrics(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Balance analytics metrics and calculations
    """


    class MetaOapg:
        
        class properties:
            availableBalance = schemas.NumberSchema
            
            
            class availableBalanceDate(
                schemas.StrSchema
            ):
                pass
            
            
            class averageDailyBalanceByMonthForTheReportTimePeriod(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ObbDateRangeAndAmount']:
                        return ObbDateRangeAndAmount
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ObbDateRangeAndAmount'], typing.List['ObbDateRangeAndAmount']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'averageDailyBalanceByMonthForTheReportTimePeriod':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ObbDateRangeAndAmount':
                    return super().__getitem__(i)
            averageDailyBalanceForTheReportTimePeriod = schemas.NumberSchema
            averageWeekdayBalanceForTheReportTimePeriod = schemas.NumberSchema
            
            
            class countDailyNegativeBalancesByMonthForTheReportTimePeriod(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ObbDateRangeAndCount']:
                        return ObbDateRangeAndCount
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ObbDateRangeAndCount'], typing.List['ObbDateRangeAndCount']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'countDailyNegativeBalancesByMonthForTheReportTimePeriod':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ObbDateRangeAndCount':
                    return super().__getitem__(i)
            currentRunningBalance = schemas.NumberSchema
            
            
            class currentRunningBalanceDate(
                schemas.StrSchema
            ):
                pass
            
            
            class dailyBalancesByWeekdayForTheReportTimePeriod(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ObbDailyBalance']:
                        return ObbDailyBalance
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ObbDailyBalance'], typing.List['ObbDailyBalance']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dailyBalancesByWeekdayForTheReportTimePeriod':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ObbDailyBalance':
                    return super().__getitem__(i)
            
            
            class dailyBalancesForTheReportTimePeriod(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ObbDailyBalance']:
                        return ObbDailyBalance
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ObbDailyBalance'], typing.List['ObbDailyBalance']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dailyBalancesForTheReportTimePeriod':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ObbDailyBalance':
                    return super().__getitem__(i)
        
            @staticmethod
            def historicNumberOfWeeksAverageBalanceIncreasing() -> typing.Type['ObbNumWeeksAverageBalanceIncreasing']:
                return ObbNumWeeksAverageBalanceIncreasing
            
            
            class maximumDailyBalanceByMonthForTheReportTimePeriod(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ObbDateRangeAndAmount']:
                        return ObbDateRangeAndAmount
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ObbDateRangeAndAmount'], typing.List['ObbDateRangeAndAmount']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'maximumDailyBalanceByMonthForTheReportTimePeriod':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ObbDateRangeAndAmount':
                    return super().__getitem__(i)
            maximumRunningBalanceForTheReportTimePeriod = schemas.NumberSchema
            
            
            class minimumDailyBalanceByMonthForTheReportTimePeriod(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ObbDateRangeAndAmount']:
                        return ObbDateRangeAndAmount
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ObbDateRangeAndAmount'], typing.List['ObbDateRangeAndAmount']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'minimumDailyBalanceByMonthForTheReportTimePeriod':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ObbDateRangeAndAmount':
                    return super().__getitem__(i)
            minimumRunningBalanceForTheReportTimePeriod = schemas.NumberSchema
            __annotations__ = {
                "availableBalance": availableBalance,
                "availableBalanceDate": availableBalanceDate,
                "averageDailyBalanceByMonthForTheReportTimePeriod": averageDailyBalanceByMonthForTheReportTimePeriod,
                "averageDailyBalanceForTheReportTimePeriod": averageDailyBalanceForTheReportTimePeriod,
                "averageWeekdayBalanceForTheReportTimePeriod": averageWeekdayBalanceForTheReportTimePeriod,
                "countDailyNegativeBalancesByMonthForTheReportTimePeriod": countDailyNegativeBalancesByMonthForTheReportTimePeriod,
                "currentRunningBalance": currentRunningBalance,
                "currentRunningBalanceDate": currentRunningBalanceDate,
                "dailyBalancesByWeekdayForTheReportTimePeriod": dailyBalancesByWeekdayForTheReportTimePeriod,
                "dailyBalancesForTheReportTimePeriod": dailyBalancesForTheReportTimePeriod,
                "historicNumberOfWeeksAverageBalanceIncreasing": historicNumberOfWeeksAverageBalanceIncreasing,
                "maximumDailyBalanceByMonthForTheReportTimePeriod": maximumDailyBalanceByMonthForTheReportTimePeriod,
                "maximumRunningBalanceForTheReportTimePeriod": maximumRunningBalanceForTheReportTimePeriod,
                "minimumDailyBalanceByMonthForTheReportTimePeriod": minimumDailyBalanceByMonthForTheReportTimePeriod,
                "minimumRunningBalanceForTheReportTimePeriod": minimumRunningBalanceForTheReportTimePeriod,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableBalance"]) -> MetaOapg.properties.availableBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableBalanceDate"]) -> MetaOapg.properties.availableBalanceDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["averageDailyBalanceByMonthForTheReportTimePeriod"]) -> MetaOapg.properties.averageDailyBalanceByMonthForTheReportTimePeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["averageDailyBalanceForTheReportTimePeriod"]) -> MetaOapg.properties.averageDailyBalanceForTheReportTimePeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["averageWeekdayBalanceForTheReportTimePeriod"]) -> MetaOapg.properties.averageWeekdayBalanceForTheReportTimePeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countDailyNegativeBalancesByMonthForTheReportTimePeriod"]) -> MetaOapg.properties.countDailyNegativeBalancesByMonthForTheReportTimePeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentRunningBalance"]) -> MetaOapg.properties.currentRunningBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentRunningBalanceDate"]) -> MetaOapg.properties.currentRunningBalanceDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dailyBalancesByWeekdayForTheReportTimePeriod"]) -> MetaOapg.properties.dailyBalancesByWeekdayForTheReportTimePeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dailyBalancesForTheReportTimePeriod"]) -> MetaOapg.properties.dailyBalancesForTheReportTimePeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["historicNumberOfWeeksAverageBalanceIncreasing"]) -> 'ObbNumWeeksAverageBalanceIncreasing': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximumDailyBalanceByMonthForTheReportTimePeriod"]) -> MetaOapg.properties.maximumDailyBalanceByMonthForTheReportTimePeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximumRunningBalanceForTheReportTimePeriod"]) -> MetaOapg.properties.maximumRunningBalanceForTheReportTimePeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimumDailyBalanceByMonthForTheReportTimePeriod"]) -> MetaOapg.properties.minimumDailyBalanceByMonthForTheReportTimePeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimumRunningBalanceForTheReportTimePeriod"]) -> MetaOapg.properties.minimumRunningBalanceForTheReportTimePeriod: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["availableBalance", "availableBalanceDate", "averageDailyBalanceByMonthForTheReportTimePeriod", "averageDailyBalanceForTheReportTimePeriod", "averageWeekdayBalanceForTheReportTimePeriod", "countDailyNegativeBalancesByMonthForTheReportTimePeriod", "currentRunningBalance", "currentRunningBalanceDate", "dailyBalancesByWeekdayForTheReportTimePeriod", "dailyBalancesForTheReportTimePeriod", "historicNumberOfWeeksAverageBalanceIncreasing", "maximumDailyBalanceByMonthForTheReportTimePeriod", "maximumRunningBalanceForTheReportTimePeriod", "minimumDailyBalanceByMonthForTheReportTimePeriod", "minimumRunningBalanceForTheReportTimePeriod", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableBalance"]) -> typing.Union[MetaOapg.properties.availableBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableBalanceDate"]) -> typing.Union[MetaOapg.properties.availableBalanceDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["averageDailyBalanceByMonthForTheReportTimePeriod"]) -> typing.Union[MetaOapg.properties.averageDailyBalanceByMonthForTheReportTimePeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["averageDailyBalanceForTheReportTimePeriod"]) -> typing.Union[MetaOapg.properties.averageDailyBalanceForTheReportTimePeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["averageWeekdayBalanceForTheReportTimePeriod"]) -> typing.Union[MetaOapg.properties.averageWeekdayBalanceForTheReportTimePeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countDailyNegativeBalancesByMonthForTheReportTimePeriod"]) -> typing.Union[MetaOapg.properties.countDailyNegativeBalancesByMonthForTheReportTimePeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentRunningBalance"]) -> typing.Union[MetaOapg.properties.currentRunningBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentRunningBalanceDate"]) -> typing.Union[MetaOapg.properties.currentRunningBalanceDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dailyBalancesByWeekdayForTheReportTimePeriod"]) -> typing.Union[MetaOapg.properties.dailyBalancesByWeekdayForTheReportTimePeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dailyBalancesForTheReportTimePeriod"]) -> typing.Union[MetaOapg.properties.dailyBalancesForTheReportTimePeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["historicNumberOfWeeksAverageBalanceIncreasing"]) -> typing.Union['ObbNumWeeksAverageBalanceIncreasing', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximumDailyBalanceByMonthForTheReportTimePeriod"]) -> typing.Union[MetaOapg.properties.maximumDailyBalanceByMonthForTheReportTimePeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximumRunningBalanceForTheReportTimePeriod"]) -> typing.Union[MetaOapg.properties.maximumRunningBalanceForTheReportTimePeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimumDailyBalanceByMonthForTheReportTimePeriod"]) -> typing.Union[MetaOapg.properties.minimumDailyBalanceByMonthForTheReportTimePeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimumRunningBalanceForTheReportTimePeriod"]) -> typing.Union[MetaOapg.properties.minimumRunningBalanceForTheReportTimePeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["availableBalance", "availableBalanceDate", "averageDailyBalanceByMonthForTheReportTimePeriod", "averageDailyBalanceForTheReportTimePeriod", "averageWeekdayBalanceForTheReportTimePeriod", "countDailyNegativeBalancesByMonthForTheReportTimePeriod", "currentRunningBalance", "currentRunningBalanceDate", "dailyBalancesByWeekdayForTheReportTimePeriod", "dailyBalancesForTheReportTimePeriod", "historicNumberOfWeeksAverageBalanceIncreasing", "maximumDailyBalanceByMonthForTheReportTimePeriod", "maximumRunningBalanceForTheReportTimePeriod", "minimumDailyBalanceByMonthForTheReportTimePeriod", "minimumRunningBalanceForTheReportTimePeriod", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        availableBalance: typing.Union[MetaOapg.properties.availableBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        availableBalanceDate: typing.Union[MetaOapg.properties.availableBalanceDate, str, schemas.Unset] = schemas.unset,
        averageDailyBalanceByMonthForTheReportTimePeriod: typing.Union[MetaOapg.properties.averageDailyBalanceByMonthForTheReportTimePeriod, list, tuple, schemas.Unset] = schemas.unset,
        averageDailyBalanceForTheReportTimePeriod: typing.Union[MetaOapg.properties.averageDailyBalanceForTheReportTimePeriod, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        averageWeekdayBalanceForTheReportTimePeriod: typing.Union[MetaOapg.properties.averageWeekdayBalanceForTheReportTimePeriod, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        countDailyNegativeBalancesByMonthForTheReportTimePeriod: typing.Union[MetaOapg.properties.countDailyNegativeBalancesByMonthForTheReportTimePeriod, list, tuple, schemas.Unset] = schemas.unset,
        currentRunningBalance: typing.Union[MetaOapg.properties.currentRunningBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currentRunningBalanceDate: typing.Union[MetaOapg.properties.currentRunningBalanceDate, str, schemas.Unset] = schemas.unset,
        dailyBalancesByWeekdayForTheReportTimePeriod: typing.Union[MetaOapg.properties.dailyBalancesByWeekdayForTheReportTimePeriod, list, tuple, schemas.Unset] = schemas.unset,
        dailyBalancesForTheReportTimePeriod: typing.Union[MetaOapg.properties.dailyBalancesForTheReportTimePeriod, list, tuple, schemas.Unset] = schemas.unset,
        historicNumberOfWeeksAverageBalanceIncreasing: typing.Union['ObbNumWeeksAverageBalanceIncreasing', schemas.Unset] = schemas.unset,
        maximumDailyBalanceByMonthForTheReportTimePeriod: typing.Union[MetaOapg.properties.maximumDailyBalanceByMonthForTheReportTimePeriod, list, tuple, schemas.Unset] = schemas.unset,
        maximumRunningBalanceForTheReportTimePeriod: typing.Union[MetaOapg.properties.maximumRunningBalanceForTheReportTimePeriod, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        minimumDailyBalanceByMonthForTheReportTimePeriod: typing.Union[MetaOapg.properties.minimumDailyBalanceByMonthForTheReportTimePeriod, list, tuple, schemas.Unset] = schemas.unset,
        minimumRunningBalanceForTheReportTimePeriod: typing.Union[MetaOapg.properties.minimumRunningBalanceForTheReportTimePeriod, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BalanceAnalyticsMetrics':
        return super().__new__(
            cls,
            *args,
            availableBalance=availableBalance,
            availableBalanceDate=availableBalanceDate,
            averageDailyBalanceByMonthForTheReportTimePeriod=averageDailyBalanceByMonthForTheReportTimePeriod,
            averageDailyBalanceForTheReportTimePeriod=averageDailyBalanceForTheReportTimePeriod,
            averageWeekdayBalanceForTheReportTimePeriod=averageWeekdayBalanceForTheReportTimePeriod,
            countDailyNegativeBalancesByMonthForTheReportTimePeriod=countDailyNegativeBalancesByMonthForTheReportTimePeriod,
            currentRunningBalance=currentRunningBalance,
            currentRunningBalanceDate=currentRunningBalanceDate,
            dailyBalancesByWeekdayForTheReportTimePeriod=dailyBalancesByWeekdayForTheReportTimePeriod,
            dailyBalancesForTheReportTimePeriod=dailyBalancesForTheReportTimePeriod,
            historicNumberOfWeeksAverageBalanceIncreasing=historicNumberOfWeeksAverageBalanceIncreasing,
            maximumDailyBalanceByMonthForTheReportTimePeriod=maximumDailyBalanceByMonthForTheReportTimePeriod,
            maximumRunningBalanceForTheReportTimePeriod=maximumRunningBalanceForTheReportTimePeriod,
            minimumDailyBalanceByMonthForTheReportTimePeriod=minimumDailyBalanceByMonthForTheReportTimePeriod,
            minimumRunningBalanceForTheReportTimePeriod=minimumRunningBalanceForTheReportTimePeriod,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.obb_daily_balance import ObbDailyBalance
from mastercard_python_sdk.model.obb_date_range_and_amount import ObbDateRangeAndAmount
from mastercard_python_sdk.model.obb_date_range_and_count import ObbDateRangeAndCount
from mastercard_python_sdk.model.obb_num_weeks_average_balance_increasing import ObbNumWeeksAverageBalanceIncreasing
