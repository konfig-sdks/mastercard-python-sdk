# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class Categorization(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Categorization Record
    """


    class MetaOapg:
        required = {
            "country",
            "category",
            "normalizedPayeeName",
        }
        
        class properties:
            normalizedPayeeName = schemas.StrSchema
            category = schemas.StrSchema
            country = schemas.StrSchema
            city = schemas.StrSchema
            state = schemas.StrSchema
            postalCode = schemas.StrSchema
            bestRepresentation = schemas.StrSchema
            __annotations__ = {
                "normalizedPayeeName": normalizedPayeeName,
                "category": category,
                "country": country,
                "city": city,
                "state": state,
                "postalCode": postalCode,
                "bestRepresentation": bestRepresentation,
            }
    
    country: MetaOapg.properties.country
    category: MetaOapg.properties.category
    normalizedPayeeName: MetaOapg.properties.normalizedPayeeName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normalizedPayeeName"]) -> MetaOapg.properties.normalizedPayeeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postalCode"]) -> MetaOapg.properties.postalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bestRepresentation"]) -> MetaOapg.properties.bestRepresentation: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["normalizedPayeeName", "category", "country", "city", "state", "postalCode", "bestRepresentation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normalizedPayeeName"]) -> MetaOapg.properties.normalizedPayeeName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postalCode"]) -> typing.Union[MetaOapg.properties.postalCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bestRepresentation"]) -> typing.Union[MetaOapg.properties.bestRepresentation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["normalizedPayeeName", "category", "country", "city", "state", "postalCode", "bestRepresentation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country: typing.Union[MetaOapg.properties.country, str, ],
        category: typing.Union[MetaOapg.properties.category, str, ],
        normalizedPayeeName: typing.Union[MetaOapg.properties.normalizedPayeeName, str, ],
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        postalCode: typing.Union[MetaOapg.properties.postalCode, str, schemas.Unset] = schemas.unset,
        bestRepresentation: typing.Union[MetaOapg.properties.bestRepresentation, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Categorization':
        return super().__new__(
            cls,
            *args,
            country=country,
            category=category,
            normalizedPayeeName=normalizedPayeeName,
            city=city,
            state=state,
            postalCode=postalCode,
            bestRepresentation=bestRepresentation,
            _configuration=_configuration,
            **kwargs,
        )
