# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class CashFlowCashFlowCreditSummary(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "monthlyCashFlowCreditSummaries",
            "twelveMonthCreditTotal",
            "twoMonthCreditTotal",
            "sixMonthCreditTotalLessTransfers",
            "twelveMonthCreditTotalLessTransfers",
            "sixMonthCreditTotal",
            "twoMonthCreditTotalLessTransfers",
        }
        
        class properties:
            
            
            class monthlyCashFlowCreditSummaries(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CashFlowMonthlyCashFlowCreditSummaries']:
                        return CashFlowMonthlyCashFlowCreditSummaries
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CashFlowMonthlyCashFlowCreditSummaries'], typing.List['CashFlowMonthlyCashFlowCreditSummaries']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'monthlyCashFlowCreditSummaries':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CashFlowMonthlyCashFlowCreditSummaries':
                    return super().__getitem__(i)
            twelveMonthCreditTotal = schemas.NumberSchema
            twelveMonthCreditTotalLessTransfers = schemas.NumberSchema
            sixMonthCreditTotal = schemas.NumberSchema
            sixMonthCreditTotalLessTransfers = schemas.NumberSchema
            twoMonthCreditTotal = schemas.NumberSchema
            twoMonthCreditTotalLessTransfers = schemas.NumberSchema
            __annotations__ = {
                "monthlyCashFlowCreditSummaries": monthlyCashFlowCreditSummaries,
                "twelveMonthCreditTotal": twelveMonthCreditTotal,
                "twelveMonthCreditTotalLessTransfers": twelveMonthCreditTotalLessTransfers,
                "sixMonthCreditTotal": sixMonthCreditTotal,
                "sixMonthCreditTotalLessTransfers": sixMonthCreditTotalLessTransfers,
                "twoMonthCreditTotal": twoMonthCreditTotal,
                "twoMonthCreditTotalLessTransfers": twoMonthCreditTotalLessTransfers,
            }
    
    monthlyCashFlowCreditSummaries: MetaOapg.properties.monthlyCashFlowCreditSummaries
    twelveMonthCreditTotal: MetaOapg.properties.twelveMonthCreditTotal
    twoMonthCreditTotal: MetaOapg.properties.twoMonthCreditTotal
    sixMonthCreditTotalLessTransfers: MetaOapg.properties.sixMonthCreditTotalLessTransfers
    twelveMonthCreditTotalLessTransfers: MetaOapg.properties.twelveMonthCreditTotalLessTransfers
    sixMonthCreditTotal: MetaOapg.properties.sixMonthCreditTotal
    twoMonthCreditTotalLessTransfers: MetaOapg.properties.twoMonthCreditTotalLessTransfers
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyCashFlowCreditSummaries"]) -> MetaOapg.properties.monthlyCashFlowCreditSummaries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twelveMonthCreditTotal"]) -> MetaOapg.properties.twelveMonthCreditTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twelveMonthCreditTotalLessTransfers"]) -> MetaOapg.properties.twelveMonthCreditTotalLessTransfers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sixMonthCreditTotal"]) -> MetaOapg.properties.sixMonthCreditTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sixMonthCreditTotalLessTransfers"]) -> MetaOapg.properties.sixMonthCreditTotalLessTransfers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twoMonthCreditTotal"]) -> MetaOapg.properties.twoMonthCreditTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twoMonthCreditTotalLessTransfers"]) -> MetaOapg.properties.twoMonthCreditTotalLessTransfers: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["monthlyCashFlowCreditSummaries", "twelveMonthCreditTotal", "twelveMonthCreditTotalLessTransfers", "sixMonthCreditTotal", "sixMonthCreditTotalLessTransfers", "twoMonthCreditTotal", "twoMonthCreditTotalLessTransfers", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyCashFlowCreditSummaries"]) -> MetaOapg.properties.monthlyCashFlowCreditSummaries: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twelveMonthCreditTotal"]) -> MetaOapg.properties.twelveMonthCreditTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twelveMonthCreditTotalLessTransfers"]) -> MetaOapg.properties.twelveMonthCreditTotalLessTransfers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sixMonthCreditTotal"]) -> MetaOapg.properties.sixMonthCreditTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sixMonthCreditTotalLessTransfers"]) -> MetaOapg.properties.sixMonthCreditTotalLessTransfers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twoMonthCreditTotal"]) -> MetaOapg.properties.twoMonthCreditTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twoMonthCreditTotalLessTransfers"]) -> MetaOapg.properties.twoMonthCreditTotalLessTransfers: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["monthlyCashFlowCreditSummaries", "twelveMonthCreditTotal", "twelveMonthCreditTotalLessTransfers", "sixMonthCreditTotal", "sixMonthCreditTotalLessTransfers", "twoMonthCreditTotal", "twoMonthCreditTotalLessTransfers", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        monthlyCashFlowCreditSummaries: typing.Union[MetaOapg.properties.monthlyCashFlowCreditSummaries, list, tuple, ],
        twelveMonthCreditTotal: typing.Union[MetaOapg.properties.twelveMonthCreditTotal, decimal.Decimal, int, float, ],
        twoMonthCreditTotal: typing.Union[MetaOapg.properties.twoMonthCreditTotal, decimal.Decimal, int, float, ],
        sixMonthCreditTotalLessTransfers: typing.Union[MetaOapg.properties.sixMonthCreditTotalLessTransfers, decimal.Decimal, int, float, ],
        twelveMonthCreditTotalLessTransfers: typing.Union[MetaOapg.properties.twelveMonthCreditTotalLessTransfers, decimal.Decimal, int, float, ],
        sixMonthCreditTotal: typing.Union[MetaOapg.properties.sixMonthCreditTotal, decimal.Decimal, int, float, ],
        twoMonthCreditTotalLessTransfers: typing.Union[MetaOapg.properties.twoMonthCreditTotalLessTransfers, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CashFlowCashFlowCreditSummary':
        return super().__new__(
            cls,
            *args,
            monthlyCashFlowCreditSummaries=monthlyCashFlowCreditSummaries,
            twelveMonthCreditTotal=twelveMonthCreditTotal,
            twoMonthCreditTotal=twoMonthCreditTotal,
            sixMonthCreditTotalLessTransfers=sixMonthCreditTotalLessTransfers,
            twelveMonthCreditTotalLessTransfers=twelveMonthCreditTotalLessTransfers,
            sixMonthCreditTotal=sixMonthCreditTotal,
            twoMonthCreditTotalLessTransfers=twoMonthCreditTotalLessTransfers,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.cash_flow_monthly_cash_flow_credit_summaries import CashFlowMonthlyCashFlowCreditSummaries
