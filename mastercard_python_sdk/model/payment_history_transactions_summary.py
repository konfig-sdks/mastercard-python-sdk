# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class PaymentHistoryTransactionsSummary(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Top-level summary of transactions
    """


    class MetaOapg:
        required = {
            "beginDate",
            "averageMonthlyNonSufficientFunds",
            "endDate",
            "totalDeposits",
            "totalWithdrawals",
            "averageMonthlyDeposits",
            "averageMonthlyWithdrawals",
            "totalNonSufficientFunds",
        }
        
        class properties:
            totalNonSufficientFunds = schemas.NumberSchema
            averageMonthlyNonSufficientFunds = schemas.NumberSchema
            totalDeposits = schemas.NumberSchema
            averageMonthlyDeposits = schemas.NumberSchema
            totalWithdrawals = schemas.NumberSchema
            averageMonthlyWithdrawals = schemas.NumberSchema
            beginDate = schemas.StrSchema
            endDate = schemas.StrSchema
            __annotations__ = {
                "totalNonSufficientFunds": totalNonSufficientFunds,
                "averageMonthlyNonSufficientFunds": averageMonthlyNonSufficientFunds,
                "totalDeposits": totalDeposits,
                "averageMonthlyDeposits": averageMonthlyDeposits,
                "totalWithdrawals": totalWithdrawals,
                "averageMonthlyWithdrawals": averageMonthlyWithdrawals,
                "beginDate": beginDate,
                "endDate": endDate,
            }
    
    beginDate: MetaOapg.properties.beginDate
    averageMonthlyNonSufficientFunds: MetaOapg.properties.averageMonthlyNonSufficientFunds
    endDate: MetaOapg.properties.endDate
    totalDeposits: MetaOapg.properties.totalDeposits
    totalWithdrawals: MetaOapg.properties.totalWithdrawals
    averageMonthlyDeposits: MetaOapg.properties.averageMonthlyDeposits
    averageMonthlyWithdrawals: MetaOapg.properties.averageMonthlyWithdrawals
    totalNonSufficientFunds: MetaOapg.properties.totalNonSufficientFunds
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalNonSufficientFunds"]) -> MetaOapg.properties.totalNonSufficientFunds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["averageMonthlyNonSufficientFunds"]) -> MetaOapg.properties.averageMonthlyNonSufficientFunds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalDeposits"]) -> MetaOapg.properties.totalDeposits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["averageMonthlyDeposits"]) -> MetaOapg.properties.averageMonthlyDeposits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalWithdrawals"]) -> MetaOapg.properties.totalWithdrawals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["averageMonthlyWithdrawals"]) -> MetaOapg.properties.averageMonthlyWithdrawals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beginDate"]) -> MetaOapg.properties.beginDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["totalNonSufficientFunds", "averageMonthlyNonSufficientFunds", "totalDeposits", "averageMonthlyDeposits", "totalWithdrawals", "averageMonthlyWithdrawals", "beginDate", "endDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalNonSufficientFunds"]) -> MetaOapg.properties.totalNonSufficientFunds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyNonSufficientFunds"]) -> MetaOapg.properties.averageMonthlyNonSufficientFunds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalDeposits"]) -> MetaOapg.properties.totalDeposits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyDeposits"]) -> MetaOapg.properties.averageMonthlyDeposits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalWithdrawals"]) -> MetaOapg.properties.totalWithdrawals: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyWithdrawals"]) -> MetaOapg.properties.averageMonthlyWithdrawals: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beginDate"]) -> MetaOapg.properties.beginDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["totalNonSufficientFunds", "averageMonthlyNonSufficientFunds", "totalDeposits", "averageMonthlyDeposits", "totalWithdrawals", "averageMonthlyWithdrawals", "beginDate", "endDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        beginDate: typing.Union[MetaOapg.properties.beginDate, str, ],
        averageMonthlyNonSufficientFunds: typing.Union[MetaOapg.properties.averageMonthlyNonSufficientFunds, decimal.Decimal, int, float, ],
        endDate: typing.Union[MetaOapg.properties.endDate, str, ],
        totalDeposits: typing.Union[MetaOapg.properties.totalDeposits, decimal.Decimal, int, float, ],
        totalWithdrawals: typing.Union[MetaOapg.properties.totalWithdrawals, decimal.Decimal, int, float, ],
        averageMonthlyDeposits: typing.Union[MetaOapg.properties.averageMonthlyDeposits, decimal.Decimal, int, float, ],
        averageMonthlyWithdrawals: typing.Union[MetaOapg.properties.averageMonthlyWithdrawals, decimal.Decimal, int, float, ],
        totalNonSufficientFunds: typing.Union[MetaOapg.properties.totalNonSufficientFunds, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentHistoryTransactionsSummary':
        return super().__new__(
            cls,
            *args,
            beginDate=beginDate,
            averageMonthlyNonSufficientFunds=averageMonthlyNonSufficientFunds,
            endDate=endDate,
            totalDeposits=totalDeposits,
            totalWithdrawals=totalWithdrawals,
            averageMonthlyDeposits=averageMonthlyDeposits,
            averageMonthlyWithdrawals=averageMonthlyWithdrawals,
            totalNonSufficientFunds=totalNonSufficientFunds,
            _configuration=_configuration,
            **kwargs,
        )
