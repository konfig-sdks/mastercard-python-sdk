# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class DirectPayStatements(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "earnings",
            "payrollPayHistoryId",
            "lastPayPeriodIndicator",
            "mainPayStatementFields",
        }
        
        class properties:
            payrollPayHistoryId = schemas.StrSchema
            lastPayPeriodIndicator = schemas.BoolSchema
        
            @staticmethod
            def mainPayStatementFields() -> typing.Type['MainPayStatementFields']:
                return MainPayStatementFields
            
            
            class earnings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Earnings']:
                        return Earnings
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Earnings'], typing.List['Earnings']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'earnings':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Earnings':
                    return super().__getitem__(i)
            
            
            class deductions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Deductions']:
                        return Deductions
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Deductions'], typing.List['Deductions']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deductions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Deductions':
                    return super().__getitem__(i)
            
            
            class directDeposits(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DirectDeposits']:
                        return DirectDeposits
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DirectDeposits'], typing.List['DirectDeposits']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'directDeposits':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DirectDeposits':
                    return super().__getitem__(i)
            __annotations__ = {
                "payrollPayHistoryId": payrollPayHistoryId,
                "lastPayPeriodIndicator": lastPayPeriodIndicator,
                "mainPayStatementFields": mainPayStatementFields,
                "earnings": earnings,
                "deductions": deductions,
                "directDeposits": directDeposits,
            }
    
    earnings: MetaOapg.properties.earnings
    payrollPayHistoryId: MetaOapg.properties.payrollPayHistoryId
    lastPayPeriodIndicator: MetaOapg.properties.lastPayPeriodIndicator
    mainPayStatementFields: 'MainPayStatementFields'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payrollPayHistoryId"]) -> MetaOapg.properties.payrollPayHistoryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastPayPeriodIndicator"]) -> MetaOapg.properties.lastPayPeriodIndicator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mainPayStatementFields"]) -> 'MainPayStatementFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["earnings"]) -> MetaOapg.properties.earnings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductions"]) -> MetaOapg.properties.deductions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["directDeposits"]) -> MetaOapg.properties.directDeposits: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payrollPayHistoryId", "lastPayPeriodIndicator", "mainPayStatementFields", "earnings", "deductions", "directDeposits", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payrollPayHistoryId"]) -> MetaOapg.properties.payrollPayHistoryId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastPayPeriodIndicator"]) -> MetaOapg.properties.lastPayPeriodIndicator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mainPayStatementFields"]) -> 'MainPayStatementFields': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["earnings"]) -> MetaOapg.properties.earnings: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductions"]) -> typing.Union[MetaOapg.properties.deductions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["directDeposits"]) -> typing.Union[MetaOapg.properties.directDeposits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payrollPayHistoryId", "lastPayPeriodIndicator", "mainPayStatementFields", "earnings", "deductions", "directDeposits", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        earnings: typing.Union[MetaOapg.properties.earnings, list, tuple, ],
        payrollPayHistoryId: typing.Union[MetaOapg.properties.payrollPayHistoryId, str, ],
        lastPayPeriodIndicator: typing.Union[MetaOapg.properties.lastPayPeriodIndicator, bool, ],
        mainPayStatementFields: 'MainPayStatementFields',
        deductions: typing.Union[MetaOapg.properties.deductions, list, tuple, schemas.Unset] = schemas.unset,
        directDeposits: typing.Union[MetaOapg.properties.directDeposits, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DirectPayStatements':
        return super().__new__(
            cls,
            *args,
            earnings=earnings,
            payrollPayHistoryId=payrollPayHistoryId,
            lastPayPeriodIndicator=lastPayPeriodIndicator,
            mainPayStatementFields=mainPayStatementFields,
            deductions=deductions,
            directDeposits=directDeposits,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.deductions import Deductions
from mastercard_python_sdk.model.direct_deposits import DirectDeposits
from mastercard_python_sdk.model.earnings import Earnings
from mastercard_python_sdk.model.main_pay_statement_fields import MainPayStatementFields
