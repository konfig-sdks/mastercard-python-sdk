# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class AnnualIncome(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "grossPayAmountYTD",
            "year",
        }
        
        class properties:
            year = schemas.StrSchema
            grossPayAmountYTD = schemas.NumberSchema
            netPayAmountYTD = schemas.NumberSchema
            basePayAmountYTD = schemas.NumberSchema
            overtimePayAmountYTD = schemas.NumberSchema
            otherPayAmountYTD = schemas.NumberSchema
            commissionPayAmount = schemas.NumberSchema
            __annotations__ = {
                "year": year,
                "grossPayAmountYTD": grossPayAmountYTD,
                "netPayAmountYTD": netPayAmountYTD,
                "basePayAmountYTD": basePayAmountYTD,
                "overtimePayAmountYTD": overtimePayAmountYTD,
                "otherPayAmountYTD": otherPayAmountYTD,
                "commissionPayAmount": commissionPayAmount,
            }
    
    grossPayAmountYTD: MetaOapg.properties.grossPayAmountYTD
    year: MetaOapg.properties.year
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grossPayAmountYTD"]) -> MetaOapg.properties.grossPayAmountYTD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netPayAmountYTD"]) -> MetaOapg.properties.netPayAmountYTD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["basePayAmountYTD"]) -> MetaOapg.properties.basePayAmountYTD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overtimePayAmountYTD"]) -> MetaOapg.properties.overtimePayAmountYTD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherPayAmountYTD"]) -> MetaOapg.properties.otherPayAmountYTD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commissionPayAmount"]) -> MetaOapg.properties.commissionPayAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["year", "grossPayAmountYTD", "netPayAmountYTD", "basePayAmountYTD", "overtimePayAmountYTD", "otherPayAmountYTD", "commissionPayAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grossPayAmountYTD"]) -> MetaOapg.properties.grossPayAmountYTD: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netPayAmountYTD"]) -> typing.Union[MetaOapg.properties.netPayAmountYTD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["basePayAmountYTD"]) -> typing.Union[MetaOapg.properties.basePayAmountYTD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overtimePayAmountYTD"]) -> typing.Union[MetaOapg.properties.overtimePayAmountYTD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherPayAmountYTD"]) -> typing.Union[MetaOapg.properties.otherPayAmountYTD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commissionPayAmount"]) -> typing.Union[MetaOapg.properties.commissionPayAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["year", "grossPayAmountYTD", "netPayAmountYTD", "basePayAmountYTD", "overtimePayAmountYTD", "otherPayAmountYTD", "commissionPayAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        grossPayAmountYTD: typing.Union[MetaOapg.properties.grossPayAmountYTD, decimal.Decimal, int, float, ],
        year: typing.Union[MetaOapg.properties.year, str, ],
        netPayAmountYTD: typing.Union[MetaOapg.properties.netPayAmountYTD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        basePayAmountYTD: typing.Union[MetaOapg.properties.basePayAmountYTD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        overtimePayAmountYTD: typing.Union[MetaOapg.properties.overtimePayAmountYTD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        otherPayAmountYTD: typing.Union[MetaOapg.properties.otherPayAmountYTD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        commissionPayAmount: typing.Union[MetaOapg.properties.commissionPayAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AnnualIncome':
        return super().__new__(
            cls,
            *args,
            grossPayAmountYTD=grossPayAmountYTD,
            year=year,
            netPayAmountYTD=netPayAmountYTD,
            basePayAmountYTD=basePayAmountYTD,
            overtimePayAmountYTD=overtimePayAmountYTD,
            otherPayAmountYTD=otherPayAmountYTD,
            commissionPayAmount=commissionPayAmount,
            _configuration=_configuration,
            **kwargs,
        )
