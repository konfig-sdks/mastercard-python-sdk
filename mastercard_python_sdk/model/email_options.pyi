# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class EmailOptions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Configuration for the Connect email's sent to customers
    """


    class MetaOapg:
        required = {
            "to",
        }
        
        class properties:
            to = schemas.StrSchema
            _from = schemas.StrSchema
            supportPhone = schemas.StrSchema
            subject = schemas.StrSchema
            firstName = schemas.StrSchema
            institutionName = schemas.StrSchema
            institutionAddress = schemas.StrSchema
        
            @staticmethod
            def signature() -> typing.Type['EmailOptionsSignature']:
                return EmailOptionsSignature
            __annotations__ = {
                "to": to,
                "from": _from,
                "supportPhone": supportPhone,
                "subject": subject,
                "firstName": firstName,
                "institutionName": institutionName,
                "institutionAddress": institutionAddress,
                "signature": signature,
            }
    
    to: MetaOapg.properties.to
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supportPhone"]) -> MetaOapg.properties.supportPhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institutionName"]) -> MetaOapg.properties.institutionName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institutionAddress"]) -> MetaOapg.properties.institutionAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signature"]) -> 'EmailOptionsSignature': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["to", "from", "supportPhone", "subject", "firstName", "institutionName", "institutionAddress", "signature", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supportPhone"]) -> typing.Union[MetaOapg.properties.supportPhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institutionName"]) -> typing.Union[MetaOapg.properties.institutionName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institutionAddress"]) -> typing.Union[MetaOapg.properties.institutionAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signature"]) -> typing.Union['EmailOptionsSignature', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["to", "from", "supportPhone", "subject", "firstName", "institutionName", "institutionAddress", "signature", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        to: typing.Union[MetaOapg.properties.to, str, ],
        supportPhone: typing.Union[MetaOapg.properties.supportPhone, str, schemas.Unset] = schemas.unset,
        subject: typing.Union[MetaOapg.properties.subject, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
        institutionName: typing.Union[MetaOapg.properties.institutionName, str, schemas.Unset] = schemas.unset,
        institutionAddress: typing.Union[MetaOapg.properties.institutionAddress, str, schemas.Unset] = schemas.unset,
        signature: typing.Union['EmailOptionsSignature', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmailOptions':
        return super().__new__(
            cls,
            *args,
            to=to,
            supportPhone=supportPhone,
            subject=subject,
            firstName=firstName,
            institutionName=institutionName,
            institutionAddress=institutionAddress,
            signature=signature,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.email_options_signature import EmailOptionsSignature
