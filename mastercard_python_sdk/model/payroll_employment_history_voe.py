# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class PayrollEmploymentHistoryVOE(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "income",
            "payrollSource",
            "employerName",
            "employment",
            "asOfDate",
            "employee",
        }
        
        class properties:
            asOfDate = schemas.Int64Schema
            employerName = schemas.StrSchema
            payrollSource = schemas.StrSchema
        
            @staticmethod
            def employee() -> typing.Type['PayrollEmployeeRecord']:
                return PayrollEmployeeRecord
        
            @staticmethod
            def employment() -> typing.Type['PayrollEmploymentRecord']:
                return PayrollEmploymentRecord
        
            @staticmethod
            def income() -> typing.Type['PayrollVOEIncomeRecord']:
                return PayrollVOEIncomeRecord
            __annotations__ = {
                "asOfDate": asOfDate,
                "employerName": employerName,
                "payrollSource": payrollSource,
                "employee": employee,
                "employment": employment,
                "income": income,
            }
    
    income: 'PayrollVOEIncomeRecord'
    payrollSource: MetaOapg.properties.payrollSource
    employerName: MetaOapg.properties.employerName
    employment: 'PayrollEmploymentRecord'
    asOfDate: MetaOapg.properties.asOfDate
    employee: 'PayrollEmployeeRecord'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asOfDate"]) -> MetaOapg.properties.asOfDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerName"]) -> MetaOapg.properties.employerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payrollSource"]) -> MetaOapg.properties.payrollSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee"]) -> 'PayrollEmployeeRecord': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment"]) -> 'PayrollEmploymentRecord': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["income"]) -> 'PayrollVOEIncomeRecord': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["asOfDate", "employerName", "payrollSource", "employee", "employment", "income", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asOfDate"]) -> MetaOapg.properties.asOfDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerName"]) -> MetaOapg.properties.employerName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payrollSource"]) -> MetaOapg.properties.payrollSource: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee"]) -> 'PayrollEmployeeRecord': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment"]) -> 'PayrollEmploymentRecord': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["income"]) -> 'PayrollVOEIncomeRecord': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["asOfDate", "employerName", "payrollSource", "employee", "employment", "income", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        income: 'PayrollVOEIncomeRecord',
        payrollSource: typing.Union[MetaOapg.properties.payrollSource, str, ],
        employerName: typing.Union[MetaOapg.properties.employerName, str, ],
        employment: 'PayrollEmploymentRecord',
        asOfDate: typing.Union[MetaOapg.properties.asOfDate, decimal.Decimal, int, ],
        employee: 'PayrollEmployeeRecord',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayrollEmploymentHistoryVOE':
        return super().__new__(
            cls,
            *args,
            income=income,
            payrollSource=payrollSource,
            employerName=employerName,
            employment=employment,
            asOfDate=asOfDate,
            employee=employee,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.payroll_employee_record import PayrollEmployeeRecord
from mastercard_python_sdk.model.payroll_employment_record import PayrollEmploymentRecord
from mastercard_python_sdk.model.payroll_voe_income_record import PayrollVOEIncomeRecord
