# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class PaymentHistoryCustomerMonthlySummary(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Customer-level summary of transactions in a month
    """


    class MetaOapg:
        required = {
            "missedRecurringExpensePayments",
            "closingBalance",
            "recurringExpensePayments",
            "nonSufficientFunds",
            "averageBalance",
            "recurringLoanPayments",
            "month",
            "taxPayments",
            "totalDeposits",
            "totalWithdrawals",
            "insurancePayments",
            "missedRecurringLoanPayments",
            "openingBalance",
        }
        
        class properties:
            month = schemas.StrSchema
            averageBalance = schemas.NumberSchema
            closingBalance = schemas.NumberSchema
            openingBalance = schemas.NumberSchema
            totalDeposits = schemas.NumberSchema
            totalWithdrawals = schemas.NumberSchema
            nonSufficientFunds = schemas.NumberSchema
            insurancePayments = schemas.NumberSchema
            taxPayments = schemas.NumberSchema
            recurringExpensePayments = schemas.NumberSchema
            missedRecurringExpensePayments = schemas.NumberSchema
            recurringLoanPayments = schemas.NumberSchema
            missedRecurringLoanPayments = schemas.NumberSchema
            __annotations__ = {
                "month": month,
                "averageBalance": averageBalance,
                "closingBalance": closingBalance,
                "openingBalance": openingBalance,
                "totalDeposits": totalDeposits,
                "totalWithdrawals": totalWithdrawals,
                "nonSufficientFunds": nonSufficientFunds,
                "insurancePayments": insurancePayments,
                "taxPayments": taxPayments,
                "recurringExpensePayments": recurringExpensePayments,
                "missedRecurringExpensePayments": missedRecurringExpensePayments,
                "recurringLoanPayments": recurringLoanPayments,
                "missedRecurringLoanPayments": missedRecurringLoanPayments,
            }
    
    missedRecurringExpensePayments: MetaOapg.properties.missedRecurringExpensePayments
    closingBalance: MetaOapg.properties.closingBalance
    recurringExpensePayments: MetaOapg.properties.recurringExpensePayments
    nonSufficientFunds: MetaOapg.properties.nonSufficientFunds
    averageBalance: MetaOapg.properties.averageBalance
    recurringLoanPayments: MetaOapg.properties.recurringLoanPayments
    month: MetaOapg.properties.month
    taxPayments: MetaOapg.properties.taxPayments
    totalDeposits: MetaOapg.properties.totalDeposits
    totalWithdrawals: MetaOapg.properties.totalWithdrawals
    insurancePayments: MetaOapg.properties.insurancePayments
    missedRecurringLoanPayments: MetaOapg.properties.missedRecurringLoanPayments
    openingBalance: MetaOapg.properties.openingBalance
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["month"]) -> MetaOapg.properties.month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["averageBalance"]) -> MetaOapg.properties.averageBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closingBalance"]) -> MetaOapg.properties.closingBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["openingBalance"]) -> MetaOapg.properties.openingBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalDeposits"]) -> MetaOapg.properties.totalDeposits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalWithdrawals"]) -> MetaOapg.properties.totalWithdrawals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonSufficientFunds"]) -> MetaOapg.properties.nonSufficientFunds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insurancePayments"]) -> MetaOapg.properties.insurancePayments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxPayments"]) -> MetaOapg.properties.taxPayments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurringExpensePayments"]) -> MetaOapg.properties.recurringExpensePayments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["missedRecurringExpensePayments"]) -> MetaOapg.properties.missedRecurringExpensePayments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurringLoanPayments"]) -> MetaOapg.properties.recurringLoanPayments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["missedRecurringLoanPayments"]) -> MetaOapg.properties.missedRecurringLoanPayments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["month", "averageBalance", "closingBalance", "openingBalance", "totalDeposits", "totalWithdrawals", "nonSufficientFunds", "insurancePayments", "taxPayments", "recurringExpensePayments", "missedRecurringExpensePayments", "recurringLoanPayments", "missedRecurringLoanPayments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["month"]) -> MetaOapg.properties.month: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["averageBalance"]) -> MetaOapg.properties.averageBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closingBalance"]) -> MetaOapg.properties.closingBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["openingBalance"]) -> MetaOapg.properties.openingBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalDeposits"]) -> MetaOapg.properties.totalDeposits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalWithdrawals"]) -> MetaOapg.properties.totalWithdrawals: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonSufficientFunds"]) -> MetaOapg.properties.nonSufficientFunds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insurancePayments"]) -> MetaOapg.properties.insurancePayments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxPayments"]) -> MetaOapg.properties.taxPayments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurringExpensePayments"]) -> MetaOapg.properties.recurringExpensePayments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["missedRecurringExpensePayments"]) -> MetaOapg.properties.missedRecurringExpensePayments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurringLoanPayments"]) -> MetaOapg.properties.recurringLoanPayments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["missedRecurringLoanPayments"]) -> MetaOapg.properties.missedRecurringLoanPayments: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["month", "averageBalance", "closingBalance", "openingBalance", "totalDeposits", "totalWithdrawals", "nonSufficientFunds", "insurancePayments", "taxPayments", "recurringExpensePayments", "missedRecurringExpensePayments", "recurringLoanPayments", "missedRecurringLoanPayments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        missedRecurringExpensePayments: typing.Union[MetaOapg.properties.missedRecurringExpensePayments, decimal.Decimal, int, float, ],
        closingBalance: typing.Union[MetaOapg.properties.closingBalance, decimal.Decimal, int, float, ],
        recurringExpensePayments: typing.Union[MetaOapg.properties.recurringExpensePayments, decimal.Decimal, int, float, ],
        nonSufficientFunds: typing.Union[MetaOapg.properties.nonSufficientFunds, decimal.Decimal, int, float, ],
        averageBalance: typing.Union[MetaOapg.properties.averageBalance, decimal.Decimal, int, float, ],
        recurringLoanPayments: typing.Union[MetaOapg.properties.recurringLoanPayments, decimal.Decimal, int, float, ],
        month: typing.Union[MetaOapg.properties.month, str, ],
        taxPayments: typing.Union[MetaOapg.properties.taxPayments, decimal.Decimal, int, float, ],
        totalDeposits: typing.Union[MetaOapg.properties.totalDeposits, decimal.Decimal, int, float, ],
        totalWithdrawals: typing.Union[MetaOapg.properties.totalWithdrawals, decimal.Decimal, int, float, ],
        insurancePayments: typing.Union[MetaOapg.properties.insurancePayments, decimal.Decimal, int, float, ],
        missedRecurringLoanPayments: typing.Union[MetaOapg.properties.missedRecurringLoanPayments, decimal.Decimal, int, float, ],
        openingBalance: typing.Union[MetaOapg.properties.openingBalance, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentHistoryCustomerMonthlySummary':
        return super().__new__(
            cls,
            *args,
            missedRecurringExpensePayments=missedRecurringExpensePayments,
            closingBalance=closingBalance,
            recurringExpensePayments=recurringExpensePayments,
            nonSufficientFunds=nonSufficientFunds,
            averageBalance=averageBalance,
            recurringLoanPayments=recurringLoanPayments,
            month=month,
            taxPayments=taxPayments,
            totalDeposits=totalDeposits,
            totalWithdrawals=totalWithdrawals,
            insurancePayments=insurancePayments,
            missedRecurringLoanPayments=missedRecurringLoanPayments,
            openingBalance=openingBalance,
            _configuration=_configuration,
            **kwargs,
        )
