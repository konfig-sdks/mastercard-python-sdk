# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class MainPayStatementFields(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "grossPayAmount",
            "payDate",
        }
        
        class properties:
            payDate = schemas.Int64Schema
            grossPayAmount = schemas.NumberSchema
            startDate = schemas.Int64Schema
            endDate = schemas.Int64Schema
            payPeriodHours = schemas.NumberSchema
            payFrequency = schemas.StrSchema
            payType = schemas.StrSchema
            grossPayAmountYTD = schemas.NumberSchema
            netPayAmount = schemas.NumberSchema
            netPayAmountYTD = schemas.NumberSchema
            __annotations__ = {
                "payDate": payDate,
                "grossPayAmount": grossPayAmount,
                "startDate": startDate,
                "endDate": endDate,
                "payPeriodHours": payPeriodHours,
                "payFrequency": payFrequency,
                "payType": payType,
                "grossPayAmountYTD": grossPayAmountYTD,
                "netPayAmount": netPayAmount,
                "netPayAmountYTD": netPayAmountYTD,
            }
    
    grossPayAmount: MetaOapg.properties.grossPayAmount
    payDate: MetaOapg.properties.payDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payDate"]) -> MetaOapg.properties.payDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grossPayAmount"]) -> MetaOapg.properties.grossPayAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payPeriodHours"]) -> MetaOapg.properties.payPeriodHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payFrequency"]) -> MetaOapg.properties.payFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payType"]) -> MetaOapg.properties.payType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grossPayAmountYTD"]) -> MetaOapg.properties.grossPayAmountYTD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netPayAmount"]) -> MetaOapg.properties.netPayAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netPayAmountYTD"]) -> MetaOapg.properties.netPayAmountYTD: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payDate", "grossPayAmount", "startDate", "endDate", "payPeriodHours", "payFrequency", "payType", "grossPayAmountYTD", "netPayAmount", "netPayAmountYTD", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payDate"]) -> MetaOapg.properties.payDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grossPayAmount"]) -> MetaOapg.properties.grossPayAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payPeriodHours"]) -> typing.Union[MetaOapg.properties.payPeriodHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payFrequency"]) -> typing.Union[MetaOapg.properties.payFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payType"]) -> typing.Union[MetaOapg.properties.payType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grossPayAmountYTD"]) -> typing.Union[MetaOapg.properties.grossPayAmountYTD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netPayAmount"]) -> typing.Union[MetaOapg.properties.netPayAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netPayAmountYTD"]) -> typing.Union[MetaOapg.properties.netPayAmountYTD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payDate", "grossPayAmount", "startDate", "endDate", "payPeriodHours", "payFrequency", "payType", "grossPayAmountYTD", "netPayAmount", "netPayAmountYTD", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        grossPayAmount: typing.Union[MetaOapg.properties.grossPayAmount, decimal.Decimal, int, float, ],
        payDate: typing.Union[MetaOapg.properties.payDate, decimal.Decimal, int, ],
        startDate: typing.Union[MetaOapg.properties.startDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payPeriodHours: typing.Union[MetaOapg.properties.payPeriodHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        payFrequency: typing.Union[MetaOapg.properties.payFrequency, str, schemas.Unset] = schemas.unset,
        payType: typing.Union[MetaOapg.properties.payType, str, schemas.Unset] = schemas.unset,
        grossPayAmountYTD: typing.Union[MetaOapg.properties.grossPayAmountYTD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        netPayAmount: typing.Union[MetaOapg.properties.netPayAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        netPayAmountYTD: typing.Union[MetaOapg.properties.netPayAmountYTD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MainPayStatementFields':
        return super().__new__(
            cls,
            *args,
            grossPayAmount=grossPayAmount,
            payDate=payDate,
            startDate=startDate,
            endDate=endDate,
            payPeriodHours=payPeriodHours,
            payFrequency=payFrequency,
            payType=payType,
            grossPayAmountYTD=grossPayAmountYTD,
            netPayAmount=netPayAmount,
            netPayAmountYTD=netPayAmountYTD,
            _configuration=_configuration,
            **kwargs,
        )
