# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class ObbAnalyticsReportAck(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Response given when analytics were generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF.
    """


    class MetaOapg:
        required = {
            "reportPin",
            "createdDate",
            "reportId",
            "accountIds",
            "customerId",
            "title",
        }
        
        class properties:
            title = schemas.StrSchema
            
            
            class accountIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accountIds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class createdDate(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 25
                    min_length = 25
            customerId = schemas.Int64Schema
            reportId = schemas.StrSchema
            
            
            class reportPin(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 0
            businessId = schemas.IntSchema
            
            
            class requesterName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            __annotations__ = {
                "title": title,
                "accountIds": accountIds,
                "createdDate": createdDate,
                "customerId": customerId,
                "reportId": reportId,
                "reportPin": reportPin,
                "businessId": businessId,
                "requesterName": requesterName,
            }
    
    reportPin: MetaOapg.properties.reportPin
    createdDate: MetaOapg.properties.createdDate
    reportId: MetaOapg.properties.reportId
    accountIds: MetaOapg.properties.accountIds
    customerId: MetaOapg.properties.customerId
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountIds"]) -> MetaOapg.properties.accountIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportId"]) -> MetaOapg.properties.reportId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportPin"]) -> MetaOapg.properties.reportPin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessId"]) -> MetaOapg.properties.businessId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requesterName"]) -> MetaOapg.properties.requesterName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "accountIds", "createdDate", "customerId", "reportId", "reportPin", "businessId", "requesterName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountIds"]) -> MetaOapg.properties.accountIds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportId"]) -> MetaOapg.properties.reportId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportPin"]) -> MetaOapg.properties.reportPin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessId"]) -> typing.Union[MetaOapg.properties.businessId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requesterName"]) -> typing.Union[MetaOapg.properties.requesterName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "accountIds", "createdDate", "customerId", "reportId", "reportPin", "businessId", "requesterName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reportPin: typing.Union[MetaOapg.properties.reportPin, str, ],
        createdDate: typing.Union[MetaOapg.properties.createdDate, str, ],
        reportId: typing.Union[MetaOapg.properties.reportId, str, ],
        accountIds: typing.Union[MetaOapg.properties.accountIds, list, tuple, ],
        customerId: typing.Union[MetaOapg.properties.customerId, decimal.Decimal, int, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        businessId: typing.Union[MetaOapg.properties.businessId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        requesterName: typing.Union[MetaOapg.properties.requesterName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObbAnalyticsReportAck':
        return super().__new__(
            cls,
            *args,
            reportPin=reportPin,
            createdDate=createdDate,
            reportId=reportId,
            accountIds=accountIds,
            customerId=customerId,
            title=title,
            businessId=businessId,
            requesterName=requesterName,
            _configuration=_configuration,
            **kwargs,
        )
