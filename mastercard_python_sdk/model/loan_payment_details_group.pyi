# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class LoanPaymentDetailsGroup(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Group details
    """


    class MetaOapg:
        required = {
            "accountId",
            "groupLoanDetail",
            "groupPaymentAddress",
            "groupPaymentNumber",
            "groupNumber",
        }
        
        class properties:
            accountId = schemas.StrSchema
            groupNumber = schemas.StrSchema
            groupPaymentNumber = schemas.StrSchema
            groupPaymentAddress = schemas.StrSchema
            
            
            class groupLoanDetail(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LoanPaymentDetailsLoan']:
                        return LoanPaymentDetailsLoan
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LoanPaymentDetailsLoan'], typing.List['LoanPaymentDetailsLoan']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groupLoanDetail':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LoanPaymentDetailsLoan':
                    return super().__getitem__(i)
            groupFuturePayoffAmount = schemas.NumberSchema
            groupFuturePayoffDate = schemas.DateTimeSchema
            __annotations__ = {
                "accountId": accountId,
                "groupNumber": groupNumber,
                "groupPaymentNumber": groupPaymentNumber,
                "groupPaymentAddress": groupPaymentAddress,
                "groupLoanDetail": groupLoanDetail,
                "groupFuturePayoffAmount": groupFuturePayoffAmount,
                "groupFuturePayoffDate": groupFuturePayoffDate,
            }
    
    accountId: MetaOapg.properties.accountId
    groupLoanDetail: MetaOapg.properties.groupLoanDetail
    groupPaymentAddress: MetaOapg.properties.groupPaymentAddress
    groupPaymentNumber: MetaOapg.properties.groupPaymentNumber
    groupNumber: MetaOapg.properties.groupNumber
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupNumber"]) -> MetaOapg.properties.groupNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupPaymentNumber"]) -> MetaOapg.properties.groupPaymentNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupPaymentAddress"]) -> MetaOapg.properties.groupPaymentAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupLoanDetail"]) -> MetaOapg.properties.groupLoanDetail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupFuturePayoffAmount"]) -> MetaOapg.properties.groupFuturePayoffAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupFuturePayoffDate"]) -> MetaOapg.properties.groupFuturePayoffDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountId", "groupNumber", "groupPaymentNumber", "groupPaymentAddress", "groupLoanDetail", "groupFuturePayoffAmount", "groupFuturePayoffDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupNumber"]) -> MetaOapg.properties.groupNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupPaymentNumber"]) -> MetaOapg.properties.groupPaymentNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupPaymentAddress"]) -> MetaOapg.properties.groupPaymentAddress: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupLoanDetail"]) -> MetaOapg.properties.groupLoanDetail: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupFuturePayoffAmount"]) -> typing.Union[MetaOapg.properties.groupFuturePayoffAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupFuturePayoffDate"]) -> typing.Union[MetaOapg.properties.groupFuturePayoffDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountId", "groupNumber", "groupPaymentNumber", "groupPaymentAddress", "groupLoanDetail", "groupFuturePayoffAmount", "groupFuturePayoffDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accountId: typing.Union[MetaOapg.properties.accountId, str, ],
        groupLoanDetail: typing.Union[MetaOapg.properties.groupLoanDetail, list, tuple, ],
        groupPaymentAddress: typing.Union[MetaOapg.properties.groupPaymentAddress, str, ],
        groupPaymentNumber: typing.Union[MetaOapg.properties.groupPaymentNumber, str, ],
        groupNumber: typing.Union[MetaOapg.properties.groupNumber, str, ],
        groupFuturePayoffAmount: typing.Union[MetaOapg.properties.groupFuturePayoffAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        groupFuturePayoffDate: typing.Union[MetaOapg.properties.groupFuturePayoffDate, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LoanPaymentDetailsGroup':
        return super().__new__(
            cls,
            *args,
            accountId=accountId,
            groupLoanDetail=groupLoanDetail,
            groupPaymentAddress=groupPaymentAddress,
            groupPaymentNumber=groupPaymentNumber,
            groupNumber=groupNumber,
            groupFuturePayoffAmount=groupFuturePayoffAmount,
            groupFuturePayoffDate=groupFuturePayoffDate,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.loan_payment_details_loan import LoanPaymentDetailsLoan
