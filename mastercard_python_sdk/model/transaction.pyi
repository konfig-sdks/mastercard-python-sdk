# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class Transaction(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "accountId",
            "amount",
            "createdDate",
            "customerId",
            "description",
            "id",
            "status",
        }
        
        class properties:
            description = schemas.StrSchema
            id = schemas.Int64Schema
            amount = schemas.NumberSchema
            accountId = schemas.Int64Schema
            customerId = schemas.Int64Schema
            status = schemas.StrSchema
            createdDate = schemas.Int64Schema
            memo = schemas.StrSchema
            type = schemas.StrSchema
            transactionDate = schemas.Int64Schema
            postedDate = schemas.Int64Schema
            firstEffectiveDate = schemas.Int64Schema
            effectiveDate = schemas.Int64Schema
            optionExpireDate = schemas.Int64Schema
            checkNum = schemas.StrSchema
            escrowAmount = schemas.NumberSchema
            feeAmount = schemas.NumberSchema
            suspenseAmount = schemas.NumberSchema
            interestAmount = schemas.NumberSchema
            principalAmount = schemas.NumberSchema
            optionStrikePrice = schemas.NumberSchema
            unitQuantity = schemas.Int32Schema
            unitPrice = schemas.NumberSchema
        
            @staticmethod
            def categorization() -> typing.Type['Categorization']:
                return Categorization
            runningBalanceAmount = schemas.NumberSchema
            subaccountSecurityType = schemas.StrSchema
            commissionAmount = schemas.Int32Schema
            ticker = schemas.StrSchema
            investmentTransactionType = schemas.StrSchema
            taxesAmount = schemas.Int32Schema
            currencySymbol = schemas.StrSchema
            incomeType = schemas.StrSchema
            splitDenominator = schemas.NumberSchema
            splitNumerator = schemas.NumberSchema
            sharesPerContract = schemas.NumberSchema
            subAccountFund = schemas.StrSchema
            securityId = schemas.StrSchema
            securityIdType = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "id": id,
                "amount": amount,
                "accountId": accountId,
                "customerId": customerId,
                "status": status,
                "createdDate": createdDate,
                "memo": memo,
                "type": type,
                "transactionDate": transactionDate,
                "postedDate": postedDate,
                "firstEffectiveDate": firstEffectiveDate,
                "effectiveDate": effectiveDate,
                "optionExpireDate": optionExpireDate,
                "checkNum": checkNum,
                "escrowAmount": escrowAmount,
                "feeAmount": feeAmount,
                "suspenseAmount": suspenseAmount,
                "interestAmount": interestAmount,
                "principalAmount": principalAmount,
                "optionStrikePrice": optionStrikePrice,
                "unitQuantity": unitQuantity,
                "unitPrice": unitPrice,
                "categorization": categorization,
                "runningBalanceAmount": runningBalanceAmount,
                "subaccountSecurityType": subaccountSecurityType,
                "commissionAmount": commissionAmount,
                "ticker": ticker,
                "investmentTransactionType": investmentTransactionType,
                "taxesAmount": taxesAmount,
                "currencySymbol": currencySymbol,
                "incomeType": incomeType,
                "splitDenominator": splitDenominator,
                "splitNumerator": splitNumerator,
                "sharesPerContract": sharesPerContract,
                "subAccountFund": subAccountFund,
                "securityId": securityId,
                "securityIdType": securityIdType,
            }
    
    accountId: MetaOapg.properties.accountId
    amount: MetaOapg.properties.amount
    createdDate: MetaOapg.properties.createdDate
    customerId: MetaOapg.properties.customerId
    description: MetaOapg.properties.description
    id: MetaOapg.properties.id
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memo"]) -> MetaOapg.properties.memo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionDate"]) -> MetaOapg.properties.transactionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postedDate"]) -> MetaOapg.properties.postedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstEffectiveDate"]) -> MetaOapg.properties.firstEffectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionExpireDate"]) -> MetaOapg.properties.optionExpireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkNum"]) -> MetaOapg.properties.checkNum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["escrowAmount"]) -> MetaOapg.properties.escrowAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feeAmount"]) -> MetaOapg.properties.feeAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suspenseAmount"]) -> MetaOapg.properties.suspenseAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interestAmount"]) -> MetaOapg.properties.interestAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["principalAmount"]) -> MetaOapg.properties.principalAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionStrikePrice"]) -> MetaOapg.properties.optionStrikePrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unitQuantity"]) -> MetaOapg.properties.unitQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unitPrice"]) -> MetaOapg.properties.unitPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categorization"]) -> 'Categorization': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runningBalanceAmount"]) -> MetaOapg.properties.runningBalanceAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subaccountSecurityType"]) -> MetaOapg.properties.subaccountSecurityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commissionAmount"]) -> MetaOapg.properties.commissionAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticker"]) -> MetaOapg.properties.ticker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investmentTransactionType"]) -> MetaOapg.properties.investmentTransactionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxesAmount"]) -> MetaOapg.properties.taxesAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencySymbol"]) -> MetaOapg.properties.currencySymbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incomeType"]) -> MetaOapg.properties.incomeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["splitDenominator"]) -> MetaOapg.properties.splitDenominator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["splitNumerator"]) -> MetaOapg.properties.splitNumerator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharesPerContract"]) -> MetaOapg.properties.sharesPerContract: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subAccountFund"]) -> MetaOapg.properties.subAccountFund: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityId"]) -> MetaOapg.properties.securityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityIdType"]) -> MetaOapg.properties.securityIdType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "amount", "accountId", "customerId", "status", "createdDate", "memo", "type", "transactionDate", "postedDate", "firstEffectiveDate", "effectiveDate", "optionExpireDate", "checkNum", "escrowAmount", "feeAmount", "suspenseAmount", "interestAmount", "principalAmount", "optionStrikePrice", "unitQuantity", "unitPrice", "categorization", "runningBalanceAmount", "subaccountSecurityType", "commissionAmount", "ticker", "investmentTransactionType", "taxesAmount", "currencySymbol", "incomeType", "splitDenominator", "splitNumerator", "sharesPerContract", "subAccountFund", "securityId", "securityIdType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memo"]) -> typing.Union[MetaOapg.properties.memo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionDate"]) -> typing.Union[MetaOapg.properties.transactionDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postedDate"]) -> typing.Union[MetaOapg.properties.postedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstEffectiveDate"]) -> typing.Union[MetaOapg.properties.firstEffectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionExpireDate"]) -> typing.Union[MetaOapg.properties.optionExpireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkNum"]) -> typing.Union[MetaOapg.properties.checkNum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["escrowAmount"]) -> typing.Union[MetaOapg.properties.escrowAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feeAmount"]) -> typing.Union[MetaOapg.properties.feeAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suspenseAmount"]) -> typing.Union[MetaOapg.properties.suspenseAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interestAmount"]) -> typing.Union[MetaOapg.properties.interestAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["principalAmount"]) -> typing.Union[MetaOapg.properties.principalAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionStrikePrice"]) -> typing.Union[MetaOapg.properties.optionStrikePrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unitQuantity"]) -> typing.Union[MetaOapg.properties.unitQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unitPrice"]) -> typing.Union[MetaOapg.properties.unitPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categorization"]) -> typing.Union['Categorization', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runningBalanceAmount"]) -> typing.Union[MetaOapg.properties.runningBalanceAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subaccountSecurityType"]) -> typing.Union[MetaOapg.properties.subaccountSecurityType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commissionAmount"]) -> typing.Union[MetaOapg.properties.commissionAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticker"]) -> typing.Union[MetaOapg.properties.ticker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investmentTransactionType"]) -> typing.Union[MetaOapg.properties.investmentTransactionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxesAmount"]) -> typing.Union[MetaOapg.properties.taxesAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencySymbol"]) -> typing.Union[MetaOapg.properties.currencySymbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incomeType"]) -> typing.Union[MetaOapg.properties.incomeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["splitDenominator"]) -> typing.Union[MetaOapg.properties.splitDenominator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["splitNumerator"]) -> typing.Union[MetaOapg.properties.splitNumerator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharesPerContract"]) -> typing.Union[MetaOapg.properties.sharesPerContract, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subAccountFund"]) -> typing.Union[MetaOapg.properties.subAccountFund, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityId"]) -> typing.Union[MetaOapg.properties.securityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityIdType"]) -> typing.Union[MetaOapg.properties.securityIdType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "amount", "accountId", "customerId", "status", "createdDate", "memo", "type", "transactionDate", "postedDate", "firstEffectiveDate", "effectiveDate", "optionExpireDate", "checkNum", "escrowAmount", "feeAmount", "suspenseAmount", "interestAmount", "principalAmount", "optionStrikePrice", "unitQuantity", "unitPrice", "categorization", "runningBalanceAmount", "subaccountSecurityType", "commissionAmount", "ticker", "investmentTransactionType", "taxesAmount", "currencySymbol", "incomeType", "splitDenominator", "splitNumerator", "sharesPerContract", "subAccountFund", "securityId", "securityIdType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accountId: typing.Union[MetaOapg.properties.accountId, decimal.Decimal, int, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        createdDate: typing.Union[MetaOapg.properties.createdDate, decimal.Decimal, int, ],
        customerId: typing.Union[MetaOapg.properties.customerId, decimal.Decimal, int, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        memo: typing.Union[MetaOapg.properties.memo, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        transactionDate: typing.Union[MetaOapg.properties.transactionDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        postedDate: typing.Union[MetaOapg.properties.postedDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        firstEffectiveDate: typing.Union[MetaOapg.properties.firstEffectiveDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        optionExpireDate: typing.Union[MetaOapg.properties.optionExpireDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        checkNum: typing.Union[MetaOapg.properties.checkNum, str, schemas.Unset] = schemas.unset,
        escrowAmount: typing.Union[MetaOapg.properties.escrowAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        feeAmount: typing.Union[MetaOapg.properties.feeAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        suspenseAmount: typing.Union[MetaOapg.properties.suspenseAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        interestAmount: typing.Union[MetaOapg.properties.interestAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        principalAmount: typing.Union[MetaOapg.properties.principalAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        optionStrikePrice: typing.Union[MetaOapg.properties.optionStrikePrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        unitQuantity: typing.Union[MetaOapg.properties.unitQuantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        unitPrice: typing.Union[MetaOapg.properties.unitPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        categorization: typing.Union['Categorization', schemas.Unset] = schemas.unset,
        runningBalanceAmount: typing.Union[MetaOapg.properties.runningBalanceAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        subaccountSecurityType: typing.Union[MetaOapg.properties.subaccountSecurityType, str, schemas.Unset] = schemas.unset,
        commissionAmount: typing.Union[MetaOapg.properties.commissionAmount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ticker: typing.Union[MetaOapg.properties.ticker, str, schemas.Unset] = schemas.unset,
        investmentTransactionType: typing.Union[MetaOapg.properties.investmentTransactionType, str, schemas.Unset] = schemas.unset,
        taxesAmount: typing.Union[MetaOapg.properties.taxesAmount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currencySymbol: typing.Union[MetaOapg.properties.currencySymbol, str, schemas.Unset] = schemas.unset,
        incomeType: typing.Union[MetaOapg.properties.incomeType, str, schemas.Unset] = schemas.unset,
        splitDenominator: typing.Union[MetaOapg.properties.splitDenominator, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        splitNumerator: typing.Union[MetaOapg.properties.splitNumerator, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sharesPerContract: typing.Union[MetaOapg.properties.sharesPerContract, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        subAccountFund: typing.Union[MetaOapg.properties.subAccountFund, str, schemas.Unset] = schemas.unset,
        securityId: typing.Union[MetaOapg.properties.securityId, str, schemas.Unset] = schemas.unset,
        securityIdType: typing.Union[MetaOapg.properties.securityIdType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Transaction':
        return super().__new__(
            cls,
            *args,
            accountId=accountId,
            amount=amount,
            createdDate=createdDate,
            customerId=customerId,
            description=description,
            id=id,
            status=status,
            memo=memo,
            type=type,
            transactionDate=transactionDate,
            postedDate=postedDate,
            firstEffectiveDate=firstEffectiveDate,
            effectiveDate=effectiveDate,
            optionExpireDate=optionExpireDate,
            checkNum=checkNum,
            escrowAmount=escrowAmount,
            feeAmount=feeAmount,
            suspenseAmount=suspenseAmount,
            interestAmount=interestAmount,
            principalAmount=principalAmount,
            optionStrikePrice=optionStrikePrice,
            unitQuantity=unitQuantity,
            unitPrice=unitPrice,
            categorization=categorization,
            runningBalanceAmount=runningBalanceAmount,
            subaccountSecurityType=subaccountSecurityType,
            commissionAmount=commissionAmount,
            ticker=ticker,
            investmentTransactionType=investmentTransactionType,
            taxesAmount=taxesAmount,
            currencySymbol=currencySymbol,
            incomeType=incomeType,
            splitDenominator=splitDenominator,
            splitNumerator=splitNumerator,
            sharesPerContract=sharesPerContract,
            subAccountFund=subAccountFund,
            securityId=securityId,
            securityIdType=securityIdType,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.categorization import Categorization
