# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class ObbCurrentReportRequestDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Requested attributes of the report
    """


    class MetaOapg:
        required = {
            "reportRequestDate",
            "requestedDaysForReport",
            "requestedReportBeginDate",
        }
        
        class properties:
            
            
            class reportRequestDate(
                schemas.StrSchema
            ):
                pass
            requestedDaysForReport = schemas.IntSchema
            
            
            class requestedReportBeginDate(
                schemas.StrSchema
            ):
                pass
            
            
            class reportBeginDate(
                schemas.StrSchema
            ):
                pass
            
            
            class reportEndDate(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "reportRequestDate": reportRequestDate,
                "requestedDaysForReport": requestedDaysForReport,
                "requestedReportBeginDate": requestedReportBeginDate,
                "reportBeginDate": reportBeginDate,
                "reportEndDate": reportEndDate,
            }
    
    reportRequestDate: MetaOapg.properties.reportRequestDate
    requestedDaysForReport: MetaOapg.properties.requestedDaysForReport
    requestedReportBeginDate: MetaOapg.properties.requestedReportBeginDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportRequestDate"]) -> MetaOapg.properties.reportRequestDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestedDaysForReport"]) -> MetaOapg.properties.requestedDaysForReport: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestedReportBeginDate"]) -> MetaOapg.properties.requestedReportBeginDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportBeginDate"]) -> MetaOapg.properties.reportBeginDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportEndDate"]) -> MetaOapg.properties.reportEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reportRequestDate", "requestedDaysForReport", "requestedReportBeginDate", "reportBeginDate", "reportEndDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportRequestDate"]) -> MetaOapg.properties.reportRequestDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestedDaysForReport"]) -> MetaOapg.properties.requestedDaysForReport: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestedReportBeginDate"]) -> MetaOapg.properties.requestedReportBeginDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportBeginDate"]) -> typing.Union[MetaOapg.properties.reportBeginDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportEndDate"]) -> typing.Union[MetaOapg.properties.reportEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reportRequestDate", "requestedDaysForReport", "requestedReportBeginDate", "reportBeginDate", "reportEndDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reportRequestDate: typing.Union[MetaOapg.properties.reportRequestDate, str, ],
        requestedDaysForReport: typing.Union[MetaOapg.properties.requestedDaysForReport, decimal.Decimal, int, ],
        requestedReportBeginDate: typing.Union[MetaOapg.properties.requestedReportBeginDate, str, ],
        reportBeginDate: typing.Union[MetaOapg.properties.reportBeginDate, str, schemas.Unset] = schemas.unset,
        reportEndDate: typing.Union[MetaOapg.properties.reportEndDate, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObbCurrentReportRequestDetails':
        return super().__new__(
            cls,
            *args,
            reportRequestDate=reportRequestDate,
            requestedDaysForReport=requestedDaysForReport,
            requestedReportBeginDate=requestedReportBeginDate,
            reportBeginDate=reportBeginDate,
            reportEndDate=reportEndDate,
            _configuration=_configuration,
            **kwargs,
        )
