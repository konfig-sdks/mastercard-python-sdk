# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class ReportIncomeStreamSummary(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "incomeEstimate",
            "netMonthly",
            "confidenceType",
        }
        
        class properties:
            confidenceType = schemas.StrSchema
            
            
            class netMonthly(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NetMonthly']:
                        return NetMonthly
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NetMonthly'], typing.List['NetMonthly']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'netMonthly':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NetMonthly':
                    return super().__getitem__(i)
        
            @staticmethod
            def incomeEstimate() -> typing.Type['ReportIncomeEstimate']:
                return ReportIncomeEstimate
            __annotations__ = {
                "confidenceType": confidenceType,
                "netMonthly": netMonthly,
                "incomeEstimate": incomeEstimate,
            }
    
    incomeEstimate: 'ReportIncomeEstimate'
    netMonthly: MetaOapg.properties.netMonthly
    confidenceType: MetaOapg.properties.confidenceType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confidenceType"]) -> MetaOapg.properties.confidenceType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netMonthly"]) -> MetaOapg.properties.netMonthly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incomeEstimate"]) -> 'ReportIncomeEstimate': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["confidenceType", "netMonthly", "incomeEstimate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confidenceType"]) -> MetaOapg.properties.confidenceType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netMonthly"]) -> MetaOapg.properties.netMonthly: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incomeEstimate"]) -> 'ReportIncomeEstimate': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["confidenceType", "netMonthly", "incomeEstimate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        incomeEstimate: 'ReportIncomeEstimate',
        netMonthly: typing.Union[MetaOapg.properties.netMonthly, list, tuple, ],
        confidenceType: typing.Union[MetaOapg.properties.confidenceType, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportIncomeStreamSummary':
        return super().__new__(
            cls,
            *args,
            incomeEstimate=incomeEstimate,
            netMonthly=netMonthly,
            confidenceType=confidenceType,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.net_monthly import NetMonthly
from mastercard_python_sdk.model.report_income_estimate import ReportIncomeEstimate
