# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class Consumer(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A finicity consumer record
    """


    class MetaOapg:
        required = {
            "birthday",
            "zip",
            "lastName",
            "address",
            "city",
            "ssn",
            "firstName",
            "createdDate",
            "phone",
            "customerId",
            "id",
            "state",
            "email",
        }
        
        class properties:
            id = schemas.StrSchema
            firstName = schemas.StrSchema
            lastName = schemas.StrSchema
            customerId = schemas.Int64Schema
            address = schemas.StrSchema
            city = schemas.StrSchema
            state = schemas.StrSchema
            zip = schemas.StrSchema
            phone = schemas.StrSchema
            ssn = schemas.StrSchema
        
            @staticmethod
            def birthday() -> typing.Type['Birthday']:
                return Birthday
            email = schemas.StrSchema
            createdDate = schemas.Int64Schema
            suffix = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "firstName": firstName,
                "lastName": lastName,
                "customerId": customerId,
                "address": address,
                "city": city,
                "state": state,
                "zip": zip,
                "phone": phone,
                "ssn": ssn,
                "birthday": birthday,
                "email": email,
                "createdDate": createdDate,
                "suffix": suffix,
            }
    
    birthday: 'Birthday'
    zip: MetaOapg.properties.zip
    lastName: MetaOapg.properties.lastName
    address: MetaOapg.properties.address
    city: MetaOapg.properties.city
    ssn: MetaOapg.properties.ssn
    firstName: MetaOapg.properties.firstName
    createdDate: MetaOapg.properties.createdDate
    phone: MetaOapg.properties.phone
    customerId: MetaOapg.properties.customerId
    id: MetaOapg.properties.id
    state: MetaOapg.properties.state
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zip"]) -> MetaOapg.properties.zip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birthday"]) -> 'Birthday': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suffix"]) -> MetaOapg.properties.suffix: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "firstName", "lastName", "customerId", "address", "city", "state", "zip", "phone", "ssn", "birthday", "email", "createdDate", "suffix", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zip"]) -> MetaOapg.properties.zip: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birthday"]) -> 'Birthday': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suffix"]) -> typing.Union[MetaOapg.properties.suffix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "firstName", "lastName", "customerId", "address", "city", "state", "zip", "phone", "ssn", "birthday", "email", "createdDate", "suffix", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        birthday: 'Birthday',
        zip: typing.Union[MetaOapg.properties.zip, str, ],
        lastName: typing.Union[MetaOapg.properties.lastName, str, ],
        address: typing.Union[MetaOapg.properties.address, str, ],
        city: typing.Union[MetaOapg.properties.city, str, ],
        ssn: typing.Union[MetaOapg.properties.ssn, str, ],
        firstName: typing.Union[MetaOapg.properties.firstName, str, ],
        createdDate: typing.Union[MetaOapg.properties.createdDate, decimal.Decimal, int, ],
        phone: typing.Union[MetaOapg.properties.phone, str, ],
        customerId: typing.Union[MetaOapg.properties.customerId, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        state: typing.Union[MetaOapg.properties.state, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        suffix: typing.Union[MetaOapg.properties.suffix, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Consumer':
        return super().__new__(
            cls,
            *args,
            birthday=birthday,
            zip=zip,
            lastName=lastName,
            address=address,
            city=city,
            ssn=ssn,
            firstName=firstName,
            createdDate=createdDate,
            phone=phone,
            customerId=customerId,
            id=id,
            state=state,
            email=email,
            suffix=suffix,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.birthday import Birthday
