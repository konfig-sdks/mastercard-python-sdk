# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class CustomerAccountPosition(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details for investment account holdings
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            id = schemas.Int64Schema
            symbol = schemas.StrSchema
            units = schemas.NumberSchema
            currentPrice = schemas.NumberSchema
            securityName = schemas.StrSchema
            transactionType = schemas.StrSchema
            marketValue = schemas.NumberSchema
            changePercent = schemas.NumberSchema
            dailyChange = schemas.NumberSchema
            costBasis = schemas.NumberSchema
            holdType = schemas.StrSchema
            invSecurityType = schemas.StrSchema
            status = schemas.StrSchema
            currentPriceDate = schemas.Int64Schema
            securityType = schemas.StrSchema
            mfType = schemas.StrSchema
            posType = schemas.StrSchema
            totalGLDollar = schemas.NumberSchema
            totalGLPercent = schemas.NumberSchema
            optionStrikePrice = schemas.NumberSchema
            optionType = schemas.StrSchema
            optionSharesPerContract = schemas.NumberSchema
            optionExpireDate = schemas.DateSchema
            fiAssetClass = schemas.StrSchema
            assetClass = schemas.StrSchema
            currencyRate = schemas.NumberSchema
            securityId = schemas.StrSchema
            securityIdType = schemas.StrSchema
            costBasisPerShare = schemas.NumberSchema
            subAccountType = schemas.StrSchema
            securityCurrency = schemas.StrSchema
            todayGLDollar = schemas.NumberSchema
            todayGLPercent = schemas.NumberSchema
            __annotations__ = {
                "description": description,
                "id": id,
                "symbol": symbol,
                "units": units,
                "currentPrice": currentPrice,
                "securityName": securityName,
                "transactionType": transactionType,
                "marketValue": marketValue,
                "changePercent": changePercent,
                "dailyChange": dailyChange,
                "costBasis": costBasis,
                "holdType": holdType,
                "invSecurityType": invSecurityType,
                "status": status,
                "currentPriceDate": currentPriceDate,
                "securityType": securityType,
                "mfType": mfType,
                "posType": posType,
                "totalGLDollar": totalGLDollar,
                "totalGLPercent": totalGLPercent,
                "optionStrikePrice": optionStrikePrice,
                "optionType": optionType,
                "optionSharesPerContract": optionSharesPerContract,
                "optionExpireDate": optionExpireDate,
                "fiAssetClass": fiAssetClass,
                "assetClass": assetClass,
                "currencyRate": currencyRate,
                "securityId": securityId,
                "securityIdType": securityIdType,
                "costBasisPerShare": costBasisPerShare,
                "subAccountType": subAccountType,
                "securityCurrency": securityCurrency,
                "todayGLDollar": todayGLDollar,
                "todayGLPercent": todayGLPercent,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentPrice"]) -> MetaOapg.properties.currentPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityName"]) -> MetaOapg.properties.securityName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionType"]) -> MetaOapg.properties.transactionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["marketValue"]) -> MetaOapg.properties.marketValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changePercent"]) -> MetaOapg.properties.changePercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dailyChange"]) -> MetaOapg.properties.dailyChange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costBasis"]) -> MetaOapg.properties.costBasis: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holdType"]) -> MetaOapg.properties.holdType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invSecurityType"]) -> MetaOapg.properties.invSecurityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentPriceDate"]) -> MetaOapg.properties.currentPriceDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityType"]) -> MetaOapg.properties.securityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mfType"]) -> MetaOapg.properties.mfType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["posType"]) -> MetaOapg.properties.posType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalGLDollar"]) -> MetaOapg.properties.totalGLDollar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalGLPercent"]) -> MetaOapg.properties.totalGLPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionStrikePrice"]) -> MetaOapg.properties.optionStrikePrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionType"]) -> MetaOapg.properties.optionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionSharesPerContract"]) -> MetaOapg.properties.optionSharesPerContract: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionExpireDate"]) -> MetaOapg.properties.optionExpireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fiAssetClass"]) -> MetaOapg.properties.fiAssetClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetClass"]) -> MetaOapg.properties.assetClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyRate"]) -> MetaOapg.properties.currencyRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityId"]) -> MetaOapg.properties.securityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityIdType"]) -> MetaOapg.properties.securityIdType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costBasisPerShare"]) -> MetaOapg.properties.costBasisPerShare: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subAccountType"]) -> MetaOapg.properties.subAccountType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityCurrency"]) -> MetaOapg.properties.securityCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["todayGLDollar"]) -> MetaOapg.properties.todayGLDollar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["todayGLPercent"]) -> MetaOapg.properties.todayGLPercent: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "symbol", "units", "currentPrice", "securityName", "transactionType", "marketValue", "changePercent", "dailyChange", "costBasis", "holdType", "invSecurityType", "status", "currentPriceDate", "securityType", "mfType", "posType", "totalGLDollar", "totalGLPercent", "optionStrikePrice", "optionType", "optionSharesPerContract", "optionExpireDate", "fiAssetClass", "assetClass", "currencyRate", "securityId", "securityIdType", "costBasisPerShare", "subAccountType", "securityCurrency", "todayGLDollar", "todayGLPercent", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> typing.Union[MetaOapg.properties.units, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentPrice"]) -> typing.Union[MetaOapg.properties.currentPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityName"]) -> typing.Union[MetaOapg.properties.securityName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionType"]) -> typing.Union[MetaOapg.properties.transactionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["marketValue"]) -> typing.Union[MetaOapg.properties.marketValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changePercent"]) -> typing.Union[MetaOapg.properties.changePercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dailyChange"]) -> typing.Union[MetaOapg.properties.dailyChange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costBasis"]) -> typing.Union[MetaOapg.properties.costBasis, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holdType"]) -> typing.Union[MetaOapg.properties.holdType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invSecurityType"]) -> typing.Union[MetaOapg.properties.invSecurityType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentPriceDate"]) -> typing.Union[MetaOapg.properties.currentPriceDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityType"]) -> typing.Union[MetaOapg.properties.securityType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mfType"]) -> typing.Union[MetaOapg.properties.mfType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["posType"]) -> typing.Union[MetaOapg.properties.posType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalGLDollar"]) -> typing.Union[MetaOapg.properties.totalGLDollar, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalGLPercent"]) -> typing.Union[MetaOapg.properties.totalGLPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionStrikePrice"]) -> typing.Union[MetaOapg.properties.optionStrikePrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionType"]) -> typing.Union[MetaOapg.properties.optionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionSharesPerContract"]) -> typing.Union[MetaOapg.properties.optionSharesPerContract, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionExpireDate"]) -> typing.Union[MetaOapg.properties.optionExpireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fiAssetClass"]) -> typing.Union[MetaOapg.properties.fiAssetClass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetClass"]) -> typing.Union[MetaOapg.properties.assetClass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyRate"]) -> typing.Union[MetaOapg.properties.currencyRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityId"]) -> typing.Union[MetaOapg.properties.securityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityIdType"]) -> typing.Union[MetaOapg.properties.securityIdType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costBasisPerShare"]) -> typing.Union[MetaOapg.properties.costBasisPerShare, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subAccountType"]) -> typing.Union[MetaOapg.properties.subAccountType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityCurrency"]) -> typing.Union[MetaOapg.properties.securityCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["todayGLDollar"]) -> typing.Union[MetaOapg.properties.todayGLDollar, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["todayGLPercent"]) -> typing.Union[MetaOapg.properties.todayGLPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "symbol", "units", "currentPrice", "securityName", "transactionType", "marketValue", "changePercent", "dailyChange", "costBasis", "holdType", "invSecurityType", "status", "currentPriceDate", "securityType", "mfType", "posType", "totalGLDollar", "totalGLPercent", "optionStrikePrice", "optionType", "optionSharesPerContract", "optionExpireDate", "fiAssetClass", "assetClass", "currencyRate", "securityId", "securityIdType", "costBasisPerShare", "subAccountType", "securityCurrency", "todayGLDollar", "todayGLPercent", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        symbol: typing.Union[MetaOapg.properties.symbol, str, schemas.Unset] = schemas.unset,
        units: typing.Union[MetaOapg.properties.units, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currentPrice: typing.Union[MetaOapg.properties.currentPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        securityName: typing.Union[MetaOapg.properties.securityName, str, schemas.Unset] = schemas.unset,
        transactionType: typing.Union[MetaOapg.properties.transactionType, str, schemas.Unset] = schemas.unset,
        marketValue: typing.Union[MetaOapg.properties.marketValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        changePercent: typing.Union[MetaOapg.properties.changePercent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dailyChange: typing.Union[MetaOapg.properties.dailyChange, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        costBasis: typing.Union[MetaOapg.properties.costBasis, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        holdType: typing.Union[MetaOapg.properties.holdType, str, schemas.Unset] = schemas.unset,
        invSecurityType: typing.Union[MetaOapg.properties.invSecurityType, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        currentPriceDate: typing.Union[MetaOapg.properties.currentPriceDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        securityType: typing.Union[MetaOapg.properties.securityType, str, schemas.Unset] = schemas.unset,
        mfType: typing.Union[MetaOapg.properties.mfType, str, schemas.Unset] = schemas.unset,
        posType: typing.Union[MetaOapg.properties.posType, str, schemas.Unset] = schemas.unset,
        totalGLDollar: typing.Union[MetaOapg.properties.totalGLDollar, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalGLPercent: typing.Union[MetaOapg.properties.totalGLPercent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        optionStrikePrice: typing.Union[MetaOapg.properties.optionStrikePrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        optionType: typing.Union[MetaOapg.properties.optionType, str, schemas.Unset] = schemas.unset,
        optionSharesPerContract: typing.Union[MetaOapg.properties.optionSharesPerContract, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        optionExpireDate: typing.Union[MetaOapg.properties.optionExpireDate, str, date, schemas.Unset] = schemas.unset,
        fiAssetClass: typing.Union[MetaOapg.properties.fiAssetClass, str, schemas.Unset] = schemas.unset,
        assetClass: typing.Union[MetaOapg.properties.assetClass, str, schemas.Unset] = schemas.unset,
        currencyRate: typing.Union[MetaOapg.properties.currencyRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        securityId: typing.Union[MetaOapg.properties.securityId, str, schemas.Unset] = schemas.unset,
        securityIdType: typing.Union[MetaOapg.properties.securityIdType, str, schemas.Unset] = schemas.unset,
        costBasisPerShare: typing.Union[MetaOapg.properties.costBasisPerShare, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        subAccountType: typing.Union[MetaOapg.properties.subAccountType, str, schemas.Unset] = schemas.unset,
        securityCurrency: typing.Union[MetaOapg.properties.securityCurrency, str, schemas.Unset] = schemas.unset,
        todayGLDollar: typing.Union[MetaOapg.properties.todayGLDollar, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        todayGLPercent: typing.Union[MetaOapg.properties.todayGLPercent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomerAccountPosition':
        return super().__new__(
            cls,
            *args,
            description=description,
            id=id,
            symbol=symbol,
            units=units,
            currentPrice=currentPrice,
            securityName=securityName,
            transactionType=transactionType,
            marketValue=marketValue,
            changePercent=changePercent,
            dailyChange=dailyChange,
            costBasis=costBasis,
            holdType=holdType,
            invSecurityType=invSecurityType,
            status=status,
            currentPriceDate=currentPriceDate,
            securityType=securityType,
            mfType=mfType,
            posType=posType,
            totalGLDollar=totalGLDollar,
            totalGLPercent=totalGLPercent,
            optionStrikePrice=optionStrikePrice,
            optionType=optionType,
            optionSharesPerContract=optionSharesPerContract,
            optionExpireDate=optionExpireDate,
            fiAssetClass=fiAssetClass,
            assetClass=assetClass,
            currencyRate=currencyRate,
            securityId=securityId,
            securityIdType=securityIdType,
            costBasisPerShare=costBasisPerShare,
            subAccountType=subAccountType,
            securityCurrency=securityCurrency,
            todayGLDollar=todayGLDollar,
            todayGLPercent=todayGLPercent,
            _configuration=_configuration,
            **kwargs,
        )
