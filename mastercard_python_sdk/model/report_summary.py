# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class ReportSummary(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "createdDate",
            "requestId",
            "requesterName",
            "id",
            "type",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            requestId = schemas.StrSchema
            requesterName = schemas.StrSchema
            createdDate = schemas.Int64Schema
            type = schemas.StrSchema
            status = schemas.StrSchema
            consumerId = schemas.StrSchema
            consumerSsn = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "requestId": requestId,
                "requesterName": requesterName,
                "createdDate": createdDate,
                "type": type,
                "status": status,
                "consumerId": consumerId,
                "consumerSsn": consumerSsn,
            }

    
    createdDate: MetaOapg.properties.createdDate
    requestId: MetaOapg.properties.requestId
    requesterName: MetaOapg.properties.requesterName
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestId"]) -> MetaOapg.properties.requestId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requesterName"]) -> MetaOapg.properties.requesterName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consumerId"]) -> MetaOapg.properties.consumerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consumerSsn"]) -> MetaOapg.properties.consumerSsn: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "requestId", "requesterName", "createdDate", "type", "status", "consumerId", "consumerSsn", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestId"]) -> MetaOapg.properties.requestId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requesterName"]) -> MetaOapg.properties.requesterName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consumerId"]) -> typing.Union[MetaOapg.properties.consumerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consumerSsn"]) -> typing.Union[MetaOapg.properties.consumerSsn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "requestId", "requesterName", "createdDate", "type", "status", "consumerId", "consumerSsn", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        createdDate: typing.Union[MetaOapg.properties.createdDate, decimal.Decimal, int, ],
        requestId: typing.Union[MetaOapg.properties.requestId, str, ],
        requesterName: typing.Union[MetaOapg.properties.requesterName, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        consumerId: typing.Union[MetaOapg.properties.consumerId, str, schemas.Unset] = schemas.unset,
        consumerSsn: typing.Union[MetaOapg.properties.consumerSsn, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportSummary':
        return super().__new__(
            cls,
            *args,
            createdDate=createdDate,
            requestId=requestId,
            requesterName=requesterName,
            id=id,
            type=type,
            status=status,
            consumerId=consumerId,
            consumerSsn=consumerSsn,
            _configuration=_configuration,
            **kwargs,
        )
