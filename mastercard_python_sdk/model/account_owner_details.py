# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class AccountOwnerDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Owner of a customer account
    """


    class MetaOapg:
        required = {
            "addresses",
            "ownerName",
        }
        
        class properties:
            ownerName = schemas.StrSchema
        
            @staticmethod
            def addresses() -> typing.Type['AccountOwnerAddresses']:
                return AccountOwnerAddresses
            relationship = schemas.StrSchema
            firstName = schemas.StrSchema
            middleName = schemas.StrSchema
            lastName = schemas.StrSchema
            suffix = schemas.StrSchema
            nameClassification = schemas.StrSchema
            nameClassificationconfidencescore = schemas.NumberSchema
        
            @staticmethod
            def emails() -> typing.Type['AccountOwnerEmails']:
                return AccountOwnerEmails
        
            @staticmethod
            def phones() -> typing.Type['AccountOwnerPhones']:
                return AccountOwnerPhones
        
            @staticmethod
            def documentations() -> typing.Type['AccountOwnerDocumentations']:
                return AccountOwnerDocumentations
        
            @staticmethod
            def identityInsights() -> typing.Type['AccountOwnerIdentityInsights']:
                return AccountOwnerIdentityInsights
            __annotations__ = {
                "ownerName": ownerName,
                "addresses": addresses,
                "relationship": relationship,
                "firstName": firstName,
                "middleName": middleName,
                "lastName": lastName,
                "suffix": suffix,
                "nameClassification": nameClassification,
                "nameClassificationconfidencescore": nameClassificationconfidencescore,
                "emails": emails,
                "phones": phones,
                "documentations": documentations,
                "identityInsights": identityInsights,
            }
    
    addresses: 'AccountOwnerAddresses'
    ownerName: MetaOapg.properties.ownerName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerName"]) -> MetaOapg.properties.ownerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addresses"]) -> 'AccountOwnerAddresses': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relationship"]) -> MetaOapg.properties.relationship: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suffix"]) -> MetaOapg.properties.suffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameClassification"]) -> MetaOapg.properties.nameClassification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameClassificationconfidencescore"]) -> MetaOapg.properties.nameClassificationconfidencescore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emails"]) -> 'AccountOwnerEmails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phones"]) -> 'AccountOwnerPhones': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentations"]) -> 'AccountOwnerDocumentations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identityInsights"]) -> 'AccountOwnerIdentityInsights': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ownerName", "addresses", "relationship", "firstName", "middleName", "lastName", "suffix", "nameClassification", "nameClassificationconfidencescore", "emails", "phones", "documentations", "identityInsights", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerName"]) -> MetaOapg.properties.ownerName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addresses"]) -> 'AccountOwnerAddresses': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relationship"]) -> typing.Union[MetaOapg.properties.relationship, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suffix"]) -> typing.Union[MetaOapg.properties.suffix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameClassification"]) -> typing.Union[MetaOapg.properties.nameClassification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameClassificationconfidencescore"]) -> typing.Union[MetaOapg.properties.nameClassificationconfidencescore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emails"]) -> typing.Union['AccountOwnerEmails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phones"]) -> typing.Union['AccountOwnerPhones', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentations"]) -> typing.Union['AccountOwnerDocumentations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identityInsights"]) -> typing.Union['AccountOwnerIdentityInsights', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ownerName", "addresses", "relationship", "firstName", "middleName", "lastName", "suffix", "nameClassification", "nameClassificationconfidencescore", "emails", "phones", "documentations", "identityInsights", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        addresses: 'AccountOwnerAddresses',
        ownerName: typing.Union[MetaOapg.properties.ownerName, str, ],
        relationship: typing.Union[MetaOapg.properties.relationship, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
        suffix: typing.Union[MetaOapg.properties.suffix, str, schemas.Unset] = schemas.unset,
        nameClassification: typing.Union[MetaOapg.properties.nameClassification, str, schemas.Unset] = schemas.unset,
        nameClassificationconfidencescore: typing.Union[MetaOapg.properties.nameClassificationconfidencescore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        emails: typing.Union['AccountOwnerEmails', schemas.Unset] = schemas.unset,
        phones: typing.Union['AccountOwnerPhones', schemas.Unset] = schemas.unset,
        documentations: typing.Union['AccountOwnerDocumentations', schemas.Unset] = schemas.unset,
        identityInsights: typing.Union['AccountOwnerIdentityInsights', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccountOwnerDetails':
        return super().__new__(
            cls,
            *args,
            addresses=addresses,
            ownerName=ownerName,
            relationship=relationship,
            firstName=firstName,
            middleName=middleName,
            lastName=lastName,
            suffix=suffix,
            nameClassification=nameClassification,
            nameClassificationconfidencescore=nameClassificationconfidencescore,
            emails=emails,
            phones=phones,
            documentations=documentations,
            identityInsights=identityInsights,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.account_owner_addresses import AccountOwnerAddresses
from mastercard_python_sdk.model.account_owner_documentations import AccountOwnerDocumentations
from mastercard_python_sdk.model.account_owner_emails import AccountOwnerEmails
from mastercard_python_sdk.model.account_owner_identity_insights import AccountOwnerIdentityInsights
from mastercard_python_sdk.model.account_owner_phones import AccountOwnerPhones
