# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class AccountAnalytics(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Analytics calculated for one account in the report.
    """


    class MetaOapg:
        required = {
            "transactionalAttributes",
            "stateAttributes",
            "streams",
        }
        
        class properties:
            
            
            class transactionalAttributes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TransactionalAttribute']:
                        return TransactionalAttribute
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TransactionalAttribute'], typing.List['TransactionalAttribute']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transactionalAttributes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TransactionalAttribute':
                    return super().__getitem__(i)
            
            
            class stateAttributes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['StateAttribute']:
                        return StateAttribute
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['StateAttribute'], typing.List['StateAttribute']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stateAttributes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'StateAttribute':
                    return super().__getitem__(i)
            
            
            class streams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['StreamModel']:
                        return StreamModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['StreamModel'], typing.List['StreamModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'streams':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'StreamModel':
                    return super().__getitem__(i)
            __annotations__ = {
                "transactionalAttributes": transactionalAttributes,
                "stateAttributes": stateAttributes,
                "streams": streams,
            }
    
    transactionalAttributes: MetaOapg.properties.transactionalAttributes
    stateAttributes: MetaOapg.properties.stateAttributes
    streams: MetaOapg.properties.streams
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionalAttributes"]) -> MetaOapg.properties.transactionalAttributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateAttributes"]) -> MetaOapg.properties.stateAttributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streams"]) -> MetaOapg.properties.streams: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transactionalAttributes", "stateAttributes", "streams", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionalAttributes"]) -> MetaOapg.properties.transactionalAttributes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateAttributes"]) -> MetaOapg.properties.stateAttributes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streams"]) -> MetaOapg.properties.streams: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transactionalAttributes", "stateAttributes", "streams", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        transactionalAttributes: typing.Union[MetaOapg.properties.transactionalAttributes, list, tuple, ],
        stateAttributes: typing.Union[MetaOapg.properties.stateAttributes, list, tuple, ],
        streams: typing.Union[MetaOapg.properties.streams, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccountAnalytics':
        return super().__new__(
            cls,
            *args,
            transactionalAttributes=transactionalAttributes,
            stateAttributes=stateAttributes,
            streams=streams,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.state_attribute import StateAttribute
from mastercard_python_sdk.model.stream_model import StreamModel
from mastercard_python_sdk.model.transactional_attribute import TransactionalAttribute
