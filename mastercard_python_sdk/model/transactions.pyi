# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class Transactions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A list of transactions
    """


    class MetaOapg:
        required = {
            "fromDate",
            "moreAvailable",
            "found",
            "toDate",
            "sort",
            "transactions",
            "displaying",
        }
        
        class properties:
            found = schemas.IntSchema
            displaying = schemas.IntSchema
            moreAvailable = schemas.BoolSchema
            fromDate = schemas.Int64Schema
            toDate = schemas.Int64Schema
            sort = schemas.StrSchema
            
            
            class transactions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Transaction']:
                        return Transaction
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Transaction'], typing.List['Transaction']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transactions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Transaction':
                    return super().__getitem__(i)
            __annotations__ = {
                "found": found,
                "displaying": displaying,
                "moreAvailable": moreAvailable,
                "fromDate": fromDate,
                "toDate": toDate,
                "sort": sort,
                "transactions": transactions,
            }
    
    fromDate: MetaOapg.properties.fromDate
    moreAvailable: MetaOapg.properties.moreAvailable
    found: MetaOapg.properties.found
    toDate: MetaOapg.properties.toDate
    sort: MetaOapg.properties.sort
    transactions: MetaOapg.properties.transactions
    displaying: MetaOapg.properties.displaying
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["found"]) -> MetaOapg.properties.found: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displaying"]) -> MetaOapg.properties.displaying: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["moreAvailable"]) -> MetaOapg.properties.moreAvailable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromDate"]) -> MetaOapg.properties.fromDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toDate"]) -> MetaOapg.properties.toDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sort"]) -> MetaOapg.properties.sort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["found", "displaying", "moreAvailable", "fromDate", "toDate", "sort", "transactions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["found"]) -> MetaOapg.properties.found: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displaying"]) -> MetaOapg.properties.displaying: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["moreAvailable"]) -> MetaOapg.properties.moreAvailable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromDate"]) -> MetaOapg.properties.fromDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toDate"]) -> MetaOapg.properties.toDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sort"]) -> MetaOapg.properties.sort: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["found", "displaying", "moreAvailable", "fromDate", "toDate", "sort", "transactions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        fromDate: typing.Union[MetaOapg.properties.fromDate, decimal.Decimal, int, ],
        moreAvailable: typing.Union[MetaOapg.properties.moreAvailable, bool, ],
        found: typing.Union[MetaOapg.properties.found, decimal.Decimal, int, ],
        toDate: typing.Union[MetaOapg.properties.toDate, decimal.Decimal, int, ],
        sort: typing.Union[MetaOapg.properties.sort, str, ],
        transactions: typing.Union[MetaOapg.properties.transactions, list, tuple, ],
        displaying: typing.Union[MetaOapg.properties.displaying, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Transactions':
        return super().__new__(
            cls,
            *args,
            fromDate=fromDate,
            moreAvailable=moreAvailable,
            found=found,
            toDate=toDate,
            sort=sort,
            transactions=transactions,
            displaying=displaying,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.transaction import Transaction
