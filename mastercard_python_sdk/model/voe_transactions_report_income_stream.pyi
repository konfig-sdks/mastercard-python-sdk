# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class VOETransactionsReportIncomeStream(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "confidence",
            "estimateInclusion",
            "name",
            "id",
            "transactions",
            "cadence",
            "daysSinceLastTransaction",
            "nextExpectedTransactionDate",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            status = schemas.StrSchema
            estimateInclusion = schemas.StrSchema
            confidence = schemas.Int32Schema
        
            @staticmethod
            def cadence() -> typing.Type['CadenceDetails']:
                return CadenceDetails
            daysSinceLastTransaction = schemas.Int32Schema
            nextExpectedTransactionDate = schemas.Int64Schema
            
            
            class transactions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ReportTransaction']:
                        return ReportTransaction
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ReportTransaction'], typing.List['ReportTransaction']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transactions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ReportTransaction':
                    return super().__getitem__(i)
            incomeStreamMonths = schemas.Int32Schema
            __annotations__ = {
                "id": id,
                "name": name,
                "status": status,
                "estimateInclusion": estimateInclusion,
                "confidence": confidence,
                "cadence": cadence,
                "daysSinceLastTransaction": daysSinceLastTransaction,
                "nextExpectedTransactionDate": nextExpectedTransactionDate,
                "transactions": transactions,
                "incomeStreamMonths": incomeStreamMonths,
            }
    
    confidence: MetaOapg.properties.confidence
    estimateInclusion: MetaOapg.properties.estimateInclusion
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    transactions: MetaOapg.properties.transactions
    cadence: 'CadenceDetails'
    daysSinceLastTransaction: MetaOapg.properties.daysSinceLastTransaction
    nextExpectedTransactionDate: MetaOapg.properties.nextExpectedTransactionDate
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estimateInclusion"]) -> MetaOapg.properties.estimateInclusion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confidence"]) -> MetaOapg.properties.confidence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cadence"]) -> 'CadenceDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daysSinceLastTransaction"]) -> MetaOapg.properties.daysSinceLastTransaction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextExpectedTransactionDate"]) -> MetaOapg.properties.nextExpectedTransactionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incomeStreamMonths"]) -> MetaOapg.properties.incomeStreamMonths: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "status", "estimateInclusion", "confidence", "cadence", "daysSinceLastTransaction", "nextExpectedTransactionDate", "transactions", "incomeStreamMonths", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estimateInclusion"]) -> MetaOapg.properties.estimateInclusion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confidence"]) -> MetaOapg.properties.confidence: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cadence"]) -> 'CadenceDetails': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daysSinceLastTransaction"]) -> MetaOapg.properties.daysSinceLastTransaction: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextExpectedTransactionDate"]) -> MetaOapg.properties.nextExpectedTransactionDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incomeStreamMonths"]) -> typing.Union[MetaOapg.properties.incomeStreamMonths, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "status", "estimateInclusion", "confidence", "cadence", "daysSinceLastTransaction", "nextExpectedTransactionDate", "transactions", "incomeStreamMonths", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        confidence: typing.Union[MetaOapg.properties.confidence, decimal.Decimal, int, ],
        estimateInclusion: typing.Union[MetaOapg.properties.estimateInclusion, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        transactions: typing.Union[MetaOapg.properties.transactions, list, tuple, ],
        cadence: 'CadenceDetails',
        daysSinceLastTransaction: typing.Union[MetaOapg.properties.daysSinceLastTransaction, decimal.Decimal, int, ],
        nextExpectedTransactionDate: typing.Union[MetaOapg.properties.nextExpectedTransactionDate, decimal.Decimal, int, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        incomeStreamMonths: typing.Union[MetaOapg.properties.incomeStreamMonths, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VOETransactionsReportIncomeStream':
        return super().__new__(
            cls,
            *args,
            confidence=confidence,
            estimateInclusion=estimateInclusion,
            name=name,
            id=id,
            transactions=transactions,
            cadence=cadence,
            daysSinceLastTransaction=daysSinceLastTransaction,
            nextExpectedTransactionDate=nextExpectedTransactionDate,
            status=status,
            incomeStreamMonths=incomeStreamMonths,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.cadence_details import CadenceDetails
from mastercard_python_sdk.model.report_transaction import ReportTransaction
