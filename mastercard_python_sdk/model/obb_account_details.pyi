# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class ObbAccountDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details of the account and financial institution
    """


    class MetaOapg:
        required = {
            "institution",
            "accountOwner",
            "id",
        }
        
        class properties:
        
            @staticmethod
            def accountOwner() -> typing.Type['ObbAccountOwner']:
                return ObbAccountOwner
            id = schemas.Int64Schema
        
            @staticmethod
            def institution() -> typing.Type['ObbInstitution']:
                return ObbInstitution
            
            
            class accountNumberDisplay(
                schemas.StrSchema
            ):
                pass
            
            
            class aggregationAttemptDate(
                schemas.StrSchema
            ):
                pass
            aggregationStatusCode = schemas.IntSchema
            
            
            class aggregationSuccessDate(
                schemas.StrSchema
            ):
                pass
            
            
            class currency(
                schemas.StrSchema
            ):
                pass
            currentBalance = schemas.NumberSchema
            institutionLoginId = schemas.Int64Schema
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            realAccountNumberLast4 = schemas.IntSchema
            
            
            class status(
                schemas.StrSchema
            ):
                pass
            
            
            class type(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "accountOwner": accountOwner,
                "id": id,
                "institution": institution,
                "accountNumberDisplay": accountNumberDisplay,
                "aggregationAttemptDate": aggregationAttemptDate,
                "aggregationStatusCode": aggregationStatusCode,
                "aggregationSuccessDate": aggregationSuccessDate,
                "currency": currency,
                "currentBalance": currentBalance,
                "institutionLoginId": institutionLoginId,
                "name": name,
                "realAccountNumberLast4": realAccountNumberLast4,
                "status": status,
                "type": type,
            }
    
    institution: 'ObbInstitution'
    accountOwner: 'ObbAccountOwner'
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountOwner"]) -> 'ObbAccountOwner': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution"]) -> 'ObbInstitution': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountNumberDisplay"]) -> MetaOapg.properties.accountNumberDisplay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregationAttemptDate"]) -> MetaOapg.properties.aggregationAttemptDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregationStatusCode"]) -> MetaOapg.properties.aggregationStatusCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregationSuccessDate"]) -> MetaOapg.properties.aggregationSuccessDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentBalance"]) -> MetaOapg.properties.currentBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institutionLoginId"]) -> MetaOapg.properties.institutionLoginId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["realAccountNumberLast4"]) -> MetaOapg.properties.realAccountNumberLast4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountOwner", "id", "institution", "accountNumberDisplay", "aggregationAttemptDate", "aggregationStatusCode", "aggregationSuccessDate", "currency", "currentBalance", "institutionLoginId", "name", "realAccountNumberLast4", "status", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountOwner"]) -> 'ObbAccountOwner': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution"]) -> 'ObbInstitution': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountNumberDisplay"]) -> typing.Union[MetaOapg.properties.accountNumberDisplay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregationAttemptDate"]) -> typing.Union[MetaOapg.properties.aggregationAttemptDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregationStatusCode"]) -> typing.Union[MetaOapg.properties.aggregationStatusCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregationSuccessDate"]) -> typing.Union[MetaOapg.properties.aggregationSuccessDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentBalance"]) -> typing.Union[MetaOapg.properties.currentBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institutionLoginId"]) -> typing.Union[MetaOapg.properties.institutionLoginId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["realAccountNumberLast4"]) -> typing.Union[MetaOapg.properties.realAccountNumberLast4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountOwner", "id", "institution", "accountNumberDisplay", "aggregationAttemptDate", "aggregationStatusCode", "aggregationSuccessDate", "currency", "currentBalance", "institutionLoginId", "name", "realAccountNumberLast4", "status", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        institution: 'ObbInstitution',
        accountOwner: 'ObbAccountOwner',
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        accountNumberDisplay: typing.Union[MetaOapg.properties.accountNumberDisplay, str, schemas.Unset] = schemas.unset,
        aggregationAttemptDate: typing.Union[MetaOapg.properties.aggregationAttemptDate, str, schemas.Unset] = schemas.unset,
        aggregationStatusCode: typing.Union[MetaOapg.properties.aggregationStatusCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        aggregationSuccessDate: typing.Union[MetaOapg.properties.aggregationSuccessDate, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        currentBalance: typing.Union[MetaOapg.properties.currentBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        institutionLoginId: typing.Union[MetaOapg.properties.institutionLoginId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        realAccountNumberLast4: typing.Union[MetaOapg.properties.realAccountNumberLast4, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObbAccountDetails':
        return super().__new__(
            cls,
            *args,
            institution=institution,
            accountOwner=accountOwner,
            id=id,
            accountNumberDisplay=accountNumberDisplay,
            aggregationAttemptDate=aggregationAttemptDate,
            aggregationStatusCode=aggregationStatusCode,
            aggregationSuccessDate=aggregationSuccessDate,
            currency=currency,
            currentBalance=currentBalance,
            institutionLoginId=institutionLoginId,
            name=name,
            realAccountNumberLast4=realAccountNumberLast4,
            status=status,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.obb_account_owner import ObbAccountOwner
from mastercard_python_sdk.model.obb_institution import ObbInstitution
