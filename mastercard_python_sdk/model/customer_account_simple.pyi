# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class CustomerAccountSimple(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An account represents a bank account such as a checking or savings that the customer has added via the Connect interface.
    """


    class MetaOapg:
        required = {
            "createdDate",
            "institutionId",
            "institutionLoginId",
            "customerId",
            "name",
            "accountNumberDisplay",
            "currency",
            "id",
            "type",
            "displayPosition",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            accountNumberDisplay = schemas.StrSchema
            name = schemas.StrSchema
            type = schemas.StrSchema
            status = schemas.StrSchema
            customerId = schemas.StrSchema
            institutionId = schemas.StrSchema
            createdDate = schemas.Int64Schema
            currency = schemas.StrSchema
            institutionLoginId = schemas.Int64Schema
            displayPosition = schemas.Int32Schema
            aggregationStatusCode = schemas.IntSchema
            aggregationSuccessDate = schemas.Int64Schema
            aggregationAttemptDate = schemas.Int64Schema
            parentAccount = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "accountNumberDisplay": accountNumberDisplay,
                "name": name,
                "type": type,
                "status": status,
                "customerId": customerId,
                "institutionId": institutionId,
                "createdDate": createdDate,
                "currency": currency,
                "institutionLoginId": institutionLoginId,
                "displayPosition": displayPosition,
                "aggregationStatusCode": aggregationStatusCode,
                "aggregationSuccessDate": aggregationSuccessDate,
                "aggregationAttemptDate": aggregationAttemptDate,
                "parentAccount": parentAccount,
            }
    
    createdDate: MetaOapg.properties.createdDate
    institutionId: MetaOapg.properties.institutionId
    institutionLoginId: MetaOapg.properties.institutionLoginId
    customerId: MetaOapg.properties.customerId
    name: MetaOapg.properties.name
    accountNumberDisplay: MetaOapg.properties.accountNumberDisplay
    currency: MetaOapg.properties.currency
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    displayPosition: MetaOapg.properties.displayPosition
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountNumberDisplay"]) -> MetaOapg.properties.accountNumberDisplay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institutionId"]) -> MetaOapg.properties.institutionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institutionLoginId"]) -> MetaOapg.properties.institutionLoginId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayPosition"]) -> MetaOapg.properties.displayPosition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregationStatusCode"]) -> MetaOapg.properties.aggregationStatusCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregationSuccessDate"]) -> MetaOapg.properties.aggregationSuccessDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregationAttemptDate"]) -> MetaOapg.properties.aggregationAttemptDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentAccount"]) -> MetaOapg.properties.parentAccount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "accountNumberDisplay", "name", "type", "status", "customerId", "institutionId", "createdDate", "currency", "institutionLoginId", "displayPosition", "aggregationStatusCode", "aggregationSuccessDate", "aggregationAttemptDate", "parentAccount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountNumberDisplay"]) -> MetaOapg.properties.accountNumberDisplay: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institutionId"]) -> MetaOapg.properties.institutionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institutionLoginId"]) -> MetaOapg.properties.institutionLoginId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayPosition"]) -> MetaOapg.properties.displayPosition: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregationStatusCode"]) -> typing.Union[MetaOapg.properties.aggregationStatusCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregationSuccessDate"]) -> typing.Union[MetaOapg.properties.aggregationSuccessDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregationAttemptDate"]) -> typing.Union[MetaOapg.properties.aggregationAttemptDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentAccount"]) -> typing.Union[MetaOapg.properties.parentAccount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "accountNumberDisplay", "name", "type", "status", "customerId", "institutionId", "createdDate", "currency", "institutionLoginId", "displayPosition", "aggregationStatusCode", "aggregationSuccessDate", "aggregationAttemptDate", "parentAccount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        createdDate: typing.Union[MetaOapg.properties.createdDate, decimal.Decimal, int, ],
        institutionId: typing.Union[MetaOapg.properties.institutionId, str, ],
        institutionLoginId: typing.Union[MetaOapg.properties.institutionLoginId, decimal.Decimal, int, ],
        customerId: typing.Union[MetaOapg.properties.customerId, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        accountNumberDisplay: typing.Union[MetaOapg.properties.accountNumberDisplay, str, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        displayPosition: typing.Union[MetaOapg.properties.displayPosition, decimal.Decimal, int, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        aggregationStatusCode: typing.Union[MetaOapg.properties.aggregationStatusCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        aggregationSuccessDate: typing.Union[MetaOapg.properties.aggregationSuccessDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        aggregationAttemptDate: typing.Union[MetaOapg.properties.aggregationAttemptDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        parentAccount: typing.Union[MetaOapg.properties.parentAccount, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomerAccountSimple':
        return super().__new__(
            cls,
            *args,
            createdDate=createdDate,
            institutionId=institutionId,
            institutionLoginId=institutionLoginId,
            customerId=customerId,
            name=name,
            accountNumberDisplay=accountNumberDisplay,
            currency=currency,
            id=id,
            type=type,
            displayPosition=displayPosition,
            status=status,
            aggregationStatusCode=aggregationStatusCode,
            aggregationSuccessDate=aggregationSuccessDate,
            aggregationAttemptDate=aggregationAttemptDate,
            parentAccount=parentAccount,
            _configuration=_configuration,
            **kwargs,
        )
