# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class CashFlowMonthlyCashFlowCharacteristics(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "month",
            "totalCreditsLessTotalDebitsLessTransfers",
            "averageTransactionAmount",
            "totalCreditsLessTotalDebits",
        }
        
        class properties:
            month = schemas.Int64Schema
            totalCreditsLessTotalDebits = schemas.NumberSchema
            totalCreditsLessTotalDebitsLessTransfers = schemas.NumberSchema
            averageTransactionAmount = schemas.NumberSchema
            __annotations__ = {
                "month": month,
                "totalCreditsLessTotalDebits": totalCreditsLessTotalDebits,
                "totalCreditsLessTotalDebitsLessTransfers": totalCreditsLessTotalDebitsLessTransfers,
                "averageTransactionAmount": averageTransactionAmount,
            }
    
    month: MetaOapg.properties.month
    totalCreditsLessTotalDebitsLessTransfers: MetaOapg.properties.totalCreditsLessTotalDebitsLessTransfers
    averageTransactionAmount: MetaOapg.properties.averageTransactionAmount
    totalCreditsLessTotalDebits: MetaOapg.properties.totalCreditsLessTotalDebits
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["month"]) -> MetaOapg.properties.month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCreditsLessTotalDebits"]) -> MetaOapg.properties.totalCreditsLessTotalDebits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCreditsLessTotalDebitsLessTransfers"]) -> MetaOapg.properties.totalCreditsLessTotalDebitsLessTransfers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["averageTransactionAmount"]) -> MetaOapg.properties.averageTransactionAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["month", "totalCreditsLessTotalDebits", "totalCreditsLessTotalDebitsLessTransfers", "averageTransactionAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["month"]) -> MetaOapg.properties.month: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCreditsLessTotalDebits"]) -> MetaOapg.properties.totalCreditsLessTotalDebits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCreditsLessTotalDebitsLessTransfers"]) -> MetaOapg.properties.totalCreditsLessTotalDebitsLessTransfers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["averageTransactionAmount"]) -> MetaOapg.properties.averageTransactionAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["month", "totalCreditsLessTotalDebits", "totalCreditsLessTotalDebitsLessTransfers", "averageTransactionAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        month: typing.Union[MetaOapg.properties.month, decimal.Decimal, int, ],
        totalCreditsLessTotalDebitsLessTransfers: typing.Union[MetaOapg.properties.totalCreditsLessTotalDebitsLessTransfers, decimal.Decimal, int, float, ],
        averageTransactionAmount: typing.Union[MetaOapg.properties.averageTransactionAmount, decimal.Decimal, int, float, ],
        totalCreditsLessTotalDebits: typing.Union[MetaOapg.properties.totalCreditsLessTotalDebits, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CashFlowMonthlyCashFlowCharacteristics':
        return super().__new__(
            cls,
            *args,
            month=month,
            totalCreditsLessTotalDebitsLessTransfers=totalCreditsLessTotalDebitsLessTransfers,
            averageTransactionAmount=averageTransactionAmount,
            totalCreditsLessTotalDebits=totalCreditsLessTotalDebits,
            _configuration=_configuration,
            **kwargs,
        )
