# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class LoanPaymentDetailsLoan(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Loan details
    """


    class MetaOapg:
        required = {
            "accountId",
            "loanPaymentNumber",
            "loanPaymentAddress",
            "loanNumber",
        }
        
        class properties:
            accountId = schemas.StrSchema
            loanNumber = schemas.StrSchema
            loanPaymentNumber = schemas.StrSchema
            loanPaymentAddress = schemas.StrSchema
            loanFuturePayoffAmount = schemas.NumberSchema
            loanFuturePayoffDate = schemas.DateTimeSchema
            __annotations__ = {
                "accountId": accountId,
                "loanNumber": loanNumber,
                "loanPaymentNumber": loanPaymentNumber,
                "loanPaymentAddress": loanPaymentAddress,
                "loanFuturePayoffAmount": loanFuturePayoffAmount,
                "loanFuturePayoffDate": loanFuturePayoffDate,
            }
    
    accountId: MetaOapg.properties.accountId
    loanPaymentNumber: MetaOapg.properties.loanPaymentNumber
    loanPaymentAddress: MetaOapg.properties.loanPaymentAddress
    loanNumber: MetaOapg.properties.loanNumber
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanNumber"]) -> MetaOapg.properties.loanNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanPaymentNumber"]) -> MetaOapg.properties.loanPaymentNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanPaymentAddress"]) -> MetaOapg.properties.loanPaymentAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanFuturePayoffAmount"]) -> MetaOapg.properties.loanFuturePayoffAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanFuturePayoffDate"]) -> MetaOapg.properties.loanFuturePayoffDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountId", "loanNumber", "loanPaymentNumber", "loanPaymentAddress", "loanFuturePayoffAmount", "loanFuturePayoffDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanNumber"]) -> MetaOapg.properties.loanNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanPaymentNumber"]) -> MetaOapg.properties.loanPaymentNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanPaymentAddress"]) -> MetaOapg.properties.loanPaymentAddress: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanFuturePayoffAmount"]) -> typing.Union[MetaOapg.properties.loanFuturePayoffAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanFuturePayoffDate"]) -> typing.Union[MetaOapg.properties.loanFuturePayoffDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountId", "loanNumber", "loanPaymentNumber", "loanPaymentAddress", "loanFuturePayoffAmount", "loanFuturePayoffDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accountId: typing.Union[MetaOapg.properties.accountId, str, ],
        loanPaymentNumber: typing.Union[MetaOapg.properties.loanPaymentNumber, str, ],
        loanPaymentAddress: typing.Union[MetaOapg.properties.loanPaymentAddress, str, ],
        loanNumber: typing.Union[MetaOapg.properties.loanNumber, str, ],
        loanFuturePayoffAmount: typing.Union[MetaOapg.properties.loanFuturePayoffAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        loanFuturePayoffDate: typing.Union[MetaOapg.properties.loanFuturePayoffDate, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LoanPaymentDetailsLoan':
        return super().__new__(
            cls,
            *args,
            accountId=accountId,
            loanPaymentNumber=loanPaymentNumber,
            loanPaymentAddress=loanPaymentAddress,
            loanNumber=loanNumber,
            loanFuturePayoffAmount=loanFuturePayoffAmount,
            loanFuturePayoffDate=loanFuturePayoffDate,
            _configuration=_configuration,
            **kwargs,
        )
