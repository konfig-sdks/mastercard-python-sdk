# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class AvailableBalance(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "clearedBalance",
            "availableBalanceDate",
            "aggregationStatusCode",
            "currency",
            "clearedBalanceDate",
            "id",
            "availableBalance",
            "realAccountNumberLast4",
        }
        
        class properties:
            id = schemas.Int64Schema
            realAccountNumberLast4 = schemas.StrSchema
            availableBalance = schemas.NumberSchema
            availableBalanceDate = schemas.Int64Schema
            clearedBalance = schemas.NumberSchema
            clearedBalanceDate = schemas.Int64Schema
            aggregationStatusCode = schemas.IntSchema
            currency = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "realAccountNumberLast4": realAccountNumberLast4,
                "availableBalance": availableBalance,
                "availableBalanceDate": availableBalanceDate,
                "clearedBalance": clearedBalance,
                "clearedBalanceDate": clearedBalanceDate,
                "aggregationStatusCode": aggregationStatusCode,
                "currency": currency,
            }
    
    clearedBalance: MetaOapg.properties.clearedBalance
    availableBalanceDate: MetaOapg.properties.availableBalanceDate
    aggregationStatusCode: MetaOapg.properties.aggregationStatusCode
    currency: MetaOapg.properties.currency
    clearedBalanceDate: MetaOapg.properties.clearedBalanceDate
    id: MetaOapg.properties.id
    availableBalance: MetaOapg.properties.availableBalance
    realAccountNumberLast4: MetaOapg.properties.realAccountNumberLast4
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["realAccountNumberLast4"]) -> MetaOapg.properties.realAccountNumberLast4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableBalance"]) -> MetaOapg.properties.availableBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableBalanceDate"]) -> MetaOapg.properties.availableBalanceDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clearedBalance"]) -> MetaOapg.properties.clearedBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clearedBalanceDate"]) -> MetaOapg.properties.clearedBalanceDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregationStatusCode"]) -> MetaOapg.properties.aggregationStatusCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "realAccountNumberLast4", "availableBalance", "availableBalanceDate", "clearedBalance", "clearedBalanceDate", "aggregationStatusCode", "currency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["realAccountNumberLast4"]) -> MetaOapg.properties.realAccountNumberLast4: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableBalance"]) -> MetaOapg.properties.availableBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableBalanceDate"]) -> MetaOapg.properties.availableBalanceDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clearedBalance"]) -> MetaOapg.properties.clearedBalance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clearedBalanceDate"]) -> MetaOapg.properties.clearedBalanceDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregationStatusCode"]) -> MetaOapg.properties.aggregationStatusCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "realAccountNumberLast4", "availableBalance", "availableBalanceDate", "clearedBalance", "clearedBalanceDate", "aggregationStatusCode", "currency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        clearedBalance: typing.Union[MetaOapg.properties.clearedBalance, decimal.Decimal, int, float, ],
        availableBalanceDate: typing.Union[MetaOapg.properties.availableBalanceDate, decimal.Decimal, int, ],
        aggregationStatusCode: typing.Union[MetaOapg.properties.aggregationStatusCode, decimal.Decimal, int, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        clearedBalanceDate: typing.Union[MetaOapg.properties.clearedBalanceDate, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        availableBalance: typing.Union[MetaOapg.properties.availableBalance, decimal.Decimal, int, float, ],
        realAccountNumberLast4: typing.Union[MetaOapg.properties.realAccountNumberLast4, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AvailableBalance':
        return super().__new__(
            cls,
            *args,
            clearedBalance=clearedBalance,
            availableBalanceDate=availableBalanceDate,
            aggregationStatusCode=aggregationStatusCode,
            currency=currency,
            clearedBalanceDate=clearedBalanceDate,
            id=id,
            availableBalance=availableBalance,
            realAccountNumberLast4=realAccountNumberLast4,
            _configuration=_configuration,
            **kwargs,
        )
