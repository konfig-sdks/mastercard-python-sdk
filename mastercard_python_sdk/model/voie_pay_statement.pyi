# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class VOIEPayStatement(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            payPeriod = schemas.StrSchema
            billable = schemas.BoolSchema
            assetId = schemas.StrSchema
            payDate = schemas.Int64Schema
            startDate = schemas.Int64Schema
            endDate = schemas.Int64Schema
            netPayCurrent = schemas.NumberSchema
            netPayYTD = schemas.NumberSchema
            grossPayCurrent = schemas.NumberSchema
            grossPayYTD = schemas.NumberSchema
            payrollProvider = schemas.StrSchema
        
            @staticmethod
            def employer() -> typing.Type['Employer']:
                return Employer
        
            @staticmethod
            def employee() -> typing.Type['Employee']:
                return Employee
            
            
            class payStat(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PayStat']:
                        return PayStat
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PayStat'], typing.List['PayStat']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payStat':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PayStat':
                    return super().__getitem__(i)
            
            
            class deductions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Deduction']:
                        return Deduction
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Deduction'], typing.List['Deduction']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deductions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Deduction':
                    return super().__getitem__(i)
            
            
            class directDeposits(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DirectDeposit']:
                        return DirectDeposit
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DirectDeposit'], typing.List['DirectDeposit']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'directDeposits':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DirectDeposit':
                    return super().__getitem__(i)
            __annotations__ = {
                "payPeriod": payPeriod,
                "billable": billable,
                "assetId": assetId,
                "payDate": payDate,
                "startDate": startDate,
                "endDate": endDate,
                "netPayCurrent": netPayCurrent,
                "netPayYTD": netPayYTD,
                "grossPayCurrent": grossPayCurrent,
                "grossPayYTD": grossPayYTD,
                "payrollProvider": payrollProvider,
                "employer": employer,
                "employee": employee,
                "payStat": payStat,
                "deductions": deductions,
                "directDeposits": directDeposits,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payPeriod"]) -> MetaOapg.properties.payPeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billable"]) -> MetaOapg.properties.billable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetId"]) -> MetaOapg.properties.assetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payDate"]) -> MetaOapg.properties.payDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netPayCurrent"]) -> MetaOapg.properties.netPayCurrent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netPayYTD"]) -> MetaOapg.properties.netPayYTD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grossPayCurrent"]) -> MetaOapg.properties.grossPayCurrent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grossPayYTD"]) -> MetaOapg.properties.grossPayYTD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payrollProvider"]) -> MetaOapg.properties.payrollProvider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer"]) -> 'Employer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee"]) -> 'Employee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payStat"]) -> MetaOapg.properties.payStat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductions"]) -> MetaOapg.properties.deductions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["directDeposits"]) -> MetaOapg.properties.directDeposits: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payPeriod", "billable", "assetId", "payDate", "startDate", "endDate", "netPayCurrent", "netPayYTD", "grossPayCurrent", "grossPayYTD", "payrollProvider", "employer", "employee", "payStat", "deductions", "directDeposits", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payPeriod"]) -> typing.Union[MetaOapg.properties.payPeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billable"]) -> typing.Union[MetaOapg.properties.billable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetId"]) -> typing.Union[MetaOapg.properties.assetId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payDate"]) -> typing.Union[MetaOapg.properties.payDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netPayCurrent"]) -> typing.Union[MetaOapg.properties.netPayCurrent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netPayYTD"]) -> typing.Union[MetaOapg.properties.netPayYTD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grossPayCurrent"]) -> typing.Union[MetaOapg.properties.grossPayCurrent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grossPayYTD"]) -> typing.Union[MetaOapg.properties.grossPayYTD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payrollProvider"]) -> typing.Union[MetaOapg.properties.payrollProvider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer"]) -> typing.Union['Employer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee"]) -> typing.Union['Employee', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payStat"]) -> typing.Union[MetaOapg.properties.payStat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductions"]) -> typing.Union[MetaOapg.properties.deductions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["directDeposits"]) -> typing.Union[MetaOapg.properties.directDeposits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payPeriod", "billable", "assetId", "payDate", "startDate", "endDate", "netPayCurrent", "netPayYTD", "grossPayCurrent", "grossPayYTD", "payrollProvider", "employer", "employee", "payStat", "deductions", "directDeposits", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        payPeriod: typing.Union[MetaOapg.properties.payPeriod, str, schemas.Unset] = schemas.unset,
        billable: typing.Union[MetaOapg.properties.billable, bool, schemas.Unset] = schemas.unset,
        assetId: typing.Union[MetaOapg.properties.assetId, str, schemas.Unset] = schemas.unset,
        payDate: typing.Union[MetaOapg.properties.payDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        netPayCurrent: typing.Union[MetaOapg.properties.netPayCurrent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        netPayYTD: typing.Union[MetaOapg.properties.netPayYTD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        grossPayCurrent: typing.Union[MetaOapg.properties.grossPayCurrent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        grossPayYTD: typing.Union[MetaOapg.properties.grossPayYTD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        payrollProvider: typing.Union[MetaOapg.properties.payrollProvider, str, schemas.Unset] = schemas.unset,
        employer: typing.Union['Employer', schemas.Unset] = schemas.unset,
        employee: typing.Union['Employee', schemas.Unset] = schemas.unset,
        payStat: typing.Union[MetaOapg.properties.payStat, list, tuple, schemas.Unset] = schemas.unset,
        deductions: typing.Union[MetaOapg.properties.deductions, list, tuple, schemas.Unset] = schemas.unset,
        directDeposits: typing.Union[MetaOapg.properties.directDeposits, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VOIEPayStatement':
        return super().__new__(
            cls,
            *args,
            payPeriod=payPeriod,
            billable=billable,
            assetId=assetId,
            payDate=payDate,
            startDate=startDate,
            endDate=endDate,
            netPayCurrent=netPayCurrent,
            netPayYTD=netPayYTD,
            grossPayCurrent=grossPayCurrent,
            grossPayYTD=grossPayYTD,
            payrollProvider=payrollProvider,
            employer=employer,
            employee=employee,
            payStat=payStat,
            deductions=deductions,
            directDeposits=directDeposits,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.deduction import Deduction
from mastercard_python_sdk.model.direct_deposit import DirectDeposit
from mastercard_python_sdk.model.employee import Employee
from mastercard_python_sdk.model.employer import Employer
from mastercard_python_sdk.model.pay_stat import PayStat
