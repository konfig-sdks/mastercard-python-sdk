# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class VOIEPaystubWithTXVerifyReport(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A VOIE Paystub With TXVerify report
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class assetIds(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'assetIds':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    numberOfBillableAssets = schemas.Int32Schema
                    
                    
                    class payStatements(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['VOIEPaystubWithStatementPayStatement']:
                                return VOIEPaystubWithStatementPayStatement
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['VOIEPaystubWithStatementPayStatement'], typing.List['VOIEPaystubWithStatementPayStatement']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'payStatements':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'VOIEPaystubWithStatementPayStatement':
                            return super().__getitem__(i)
                    
                    
                    class institutions(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['ReportInstitution']:
                                return ReportInstitution
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['ReportInstitution'], typing.List['ReportInstitution']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'institutions':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'ReportInstitution':
                            return super().__getitem__(i)
                    __annotations__ = {
                        "assetIds": assetIds,
                        "numberOfBillableAssets": numberOfBillableAssets,
                        "payStatements": payStatements,
                        "institutions": institutions,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["assetIds"]) -> MetaOapg.properties.assetIds: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["numberOfBillableAssets"]) -> MetaOapg.properties.numberOfBillableAssets: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["payStatements"]) -> MetaOapg.properties.payStatements: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["institutions"]) -> MetaOapg.properties.institutions: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["assetIds", "numberOfBillableAssets", "payStatements", "institutions", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["assetIds"]) -> typing.Union[MetaOapg.properties.assetIds, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["numberOfBillableAssets"]) -> typing.Union[MetaOapg.properties.numberOfBillableAssets, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["payStatements"]) -> typing.Union[MetaOapg.properties.payStatements, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["institutions"]) -> typing.Union[MetaOapg.properties.institutions, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assetIds", "numberOfBillableAssets", "payStatements", "institutions", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                assetIds: typing.Union[MetaOapg.properties.assetIds, list, tuple, schemas.Unset] = schemas.unset,
                numberOfBillableAssets: typing.Union[MetaOapg.properties.numberOfBillableAssets, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                payStatements: typing.Union[MetaOapg.properties.payStatements, list, tuple, schemas.Unset] = schemas.unset,
                institutions: typing.Union[MetaOapg.properties.institutions, list, tuple, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    assetIds=assetIds,
                    numberOfBillableAssets=numberOfBillableAssets,
                    payStatements=payStatements,
                    institutions=institutions,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                BaseReportAckWithPortfolioId,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VOIEPaystubWithTXVerifyReport':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.base_report_ack_with_portfolio_id import BaseReportAckWithPortfolioId
from mastercard_python_sdk.model.report_institution import ReportInstitution
from mastercard_python_sdk.model.voie_paystub_with_statement_pay_statement import VOIEPaystubWithStatementPayStatement
