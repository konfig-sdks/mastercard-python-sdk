# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class PaymentHistoryAnalytics(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Payment History computed analytics
    """


    class MetaOapg:
        
        class properties:
            status = schemas.StrSchema
            riskScore = schemas.NumberSchema
            transactionHistory = schemas.IntSchema
        
            @staticmethod
            def transactionsSummary() -> typing.Type['PaymentHistoryTransactionsSummary']:
                return PaymentHistoryTransactionsSummary
            
            
            class accountSummaries(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PaymentHistoryAccountSummary']:
                        return PaymentHistoryAccountSummary
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PaymentHistoryAccountSummary'], typing.List['PaymentHistoryAccountSummary']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accountSummaries':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PaymentHistoryAccountSummary':
                    return super().__getitem__(i)
            
            
            class customerSummaryByMonths(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PaymentHistoryCustomerMonthlySummary']:
                        return PaymentHistoryCustomerMonthlySummary
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PaymentHistoryCustomerMonthlySummary'], typing.List['PaymentHistoryCustomerMonthlySummary']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customerSummaryByMonths':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PaymentHistoryCustomerMonthlySummary':
                    return super().__getitem__(i)
            __annotations__ = {
                "status": status,
                "riskScore": riskScore,
                "transactionHistory": transactionHistory,
                "transactionsSummary": transactionsSummary,
                "accountSummaries": accountSummaries,
                "customerSummaryByMonths": customerSummaryByMonths,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskScore"]) -> MetaOapg.properties.riskScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionHistory"]) -> MetaOapg.properties.transactionHistory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionsSummary"]) -> 'PaymentHistoryTransactionsSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountSummaries"]) -> MetaOapg.properties.accountSummaries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerSummaryByMonths"]) -> MetaOapg.properties.customerSummaryByMonths: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "riskScore", "transactionHistory", "transactionsSummary", "accountSummaries", "customerSummaryByMonths", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskScore"]) -> typing.Union[MetaOapg.properties.riskScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionHistory"]) -> typing.Union[MetaOapg.properties.transactionHistory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionsSummary"]) -> typing.Union['PaymentHistoryTransactionsSummary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountSummaries"]) -> typing.Union[MetaOapg.properties.accountSummaries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerSummaryByMonths"]) -> typing.Union[MetaOapg.properties.customerSummaryByMonths, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "riskScore", "transactionHistory", "transactionsSummary", "accountSummaries", "customerSummaryByMonths", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        riskScore: typing.Union[MetaOapg.properties.riskScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        transactionHistory: typing.Union[MetaOapg.properties.transactionHistory, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        transactionsSummary: typing.Union['PaymentHistoryTransactionsSummary', schemas.Unset] = schemas.unset,
        accountSummaries: typing.Union[MetaOapg.properties.accountSummaries, list, tuple, schemas.Unset] = schemas.unset,
        customerSummaryByMonths: typing.Union[MetaOapg.properties.customerSummaryByMonths, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentHistoryAnalytics':
        return super().__new__(
            cls,
            *args,
            status=status,
            riskScore=riskScore,
            transactionHistory=transactionHistory,
            transactionsSummary=transactionsSummary,
            accountSummaries=accountSummaries,
            customerSummaryByMonths=customerSummaryByMonths,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.payment_history_account_summary import PaymentHistoryAccountSummary
from mastercard_python_sdk.model.payment_history_customer_monthly_summary import PaymentHistoryCustomerMonthlySummary
from mastercard_python_sdk.model.payment_history_transactions_summary import PaymentHistoryTransactionsSummary
