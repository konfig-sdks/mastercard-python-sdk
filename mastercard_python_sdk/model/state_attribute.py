# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class StateAttribute(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An attribute which represents some state over time, such as a balance or a
calculation, including derivatives, ratios, or projections. Reports the
state over the requested time interval(s).
    """


    class MetaOapg:
        required = {
            "reportedByTimePeriods",
            "attributeName",
        }
        
        class properties:
            attributeName = schemas.StrSchema
            
            
            class reportedByTimePeriods(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['StateTimeInterval']:
                        return StateTimeInterval
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['StateTimeInterval'], typing.List['StateTimeInterval']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reportedByTimePeriods':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'StateTimeInterval':
                    return super().__getitem__(i)
            __annotations__ = {
                "attributeName": attributeName,
                "reportedByTimePeriods": reportedByTimePeriods,
            }
    
    reportedByTimePeriods: MetaOapg.properties.reportedByTimePeriods
    attributeName: MetaOapg.properties.attributeName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributeName"]) -> MetaOapg.properties.attributeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportedByTimePeriods"]) -> MetaOapg.properties.reportedByTimePeriods: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributeName", "reportedByTimePeriods", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributeName"]) -> MetaOapg.properties.attributeName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportedByTimePeriods"]) -> MetaOapg.properties.reportedByTimePeriods: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributeName", "reportedByTimePeriods", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reportedByTimePeriods: typing.Union[MetaOapg.properties.reportedByTimePeriods, list, tuple, ],
        attributeName: typing.Union[MetaOapg.properties.attributeName, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StateAttribute':
        return super().__new__(
            cls,
            *args,
            reportedByTimePeriods=reportedByTimePeriods,
            attributeName=attributeName,
            _configuration=_configuration,
            **kwargs,
        )

from mastercard_python_sdk.model.state_time_interval import StateTimeInterval
