# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class PayrollDataOut(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            payrollDataRetrievalId = schemas.StrSchema
            
            
            class employmentIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employmentIds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class payrollAccountIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payrollAccountIds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            reportId = schemas.StrSchema
            __annotations__ = {
                "payrollDataRetrievalId": payrollDataRetrievalId,
                "employmentIds": employmentIds,
                "payrollAccountIds": payrollAccountIds,
                "reportId": reportId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payrollDataRetrievalId"]) -> MetaOapg.properties.payrollDataRetrievalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentIds"]) -> MetaOapg.properties.employmentIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payrollAccountIds"]) -> MetaOapg.properties.payrollAccountIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportId"]) -> MetaOapg.properties.reportId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payrollDataRetrievalId", "employmentIds", "payrollAccountIds", "reportId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payrollDataRetrievalId"]) -> typing.Union[MetaOapg.properties.payrollDataRetrievalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentIds"]) -> typing.Union[MetaOapg.properties.employmentIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payrollAccountIds"]) -> typing.Union[MetaOapg.properties.payrollAccountIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportId"]) -> typing.Union[MetaOapg.properties.reportId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payrollDataRetrievalId", "employmentIds", "payrollAccountIds", "reportId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        payrollDataRetrievalId: typing.Union[MetaOapg.properties.payrollDataRetrievalId, str, schemas.Unset] = schemas.unset,
        employmentIds: typing.Union[MetaOapg.properties.employmentIds, list, tuple, schemas.Unset] = schemas.unset,
        payrollAccountIds: typing.Union[MetaOapg.properties.payrollAccountIds, list, tuple, schemas.Unset] = schemas.unset,
        reportId: typing.Union[MetaOapg.properties.reportId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayrollDataOut':
        return super().__new__(
            cls,
            *args,
            payrollDataRetrievalId=payrollDataRetrievalId,
            employmentIds=employmentIds,
            payrollAccountIds=payrollAccountIds,
            reportId=reportId,
            _configuration=_configuration,
            **kwargs,
        )
