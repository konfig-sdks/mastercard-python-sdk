# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class CashFlowMonthlyCashFlowCredits(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "averageCreditAmount",
            "estimatedNumberOfLoanDeposits",
            "month",
            "estimatedLoanDepositAmount",
            "numberOfCredits",
            "largestCredit",
            "totalCreditsAmount",
            "numberOfCreditsLessTransfers",
            "totalCreditsAmountLessTransfers",
        }
        
        class properties:
            month = schemas.Int64Schema
            numberOfCredits = schemas.StrSchema
            totalCreditsAmount = schemas.NumberSchema
            largestCredit = schemas.NumberSchema
            numberOfCreditsLessTransfers = schemas.StrSchema
            totalCreditsAmountLessTransfers = schemas.NumberSchema
            averageCreditAmount = schemas.NumberSchema
            estimatedNumberOfLoanDeposits = schemas.StrSchema
            estimatedLoanDepositAmount = schemas.NumberSchema
            __annotations__ = {
                "month": month,
                "numberOfCredits": numberOfCredits,
                "totalCreditsAmount": totalCreditsAmount,
                "largestCredit": largestCredit,
                "numberOfCreditsLessTransfers": numberOfCreditsLessTransfers,
                "totalCreditsAmountLessTransfers": totalCreditsAmountLessTransfers,
                "averageCreditAmount": averageCreditAmount,
                "estimatedNumberOfLoanDeposits": estimatedNumberOfLoanDeposits,
                "estimatedLoanDepositAmount": estimatedLoanDepositAmount,
            }
    
    averageCreditAmount: MetaOapg.properties.averageCreditAmount
    estimatedNumberOfLoanDeposits: MetaOapg.properties.estimatedNumberOfLoanDeposits
    month: MetaOapg.properties.month
    estimatedLoanDepositAmount: MetaOapg.properties.estimatedLoanDepositAmount
    numberOfCredits: MetaOapg.properties.numberOfCredits
    largestCredit: MetaOapg.properties.largestCredit
    totalCreditsAmount: MetaOapg.properties.totalCreditsAmount
    numberOfCreditsLessTransfers: MetaOapg.properties.numberOfCreditsLessTransfers
    totalCreditsAmountLessTransfers: MetaOapg.properties.totalCreditsAmountLessTransfers
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["month"]) -> MetaOapg.properties.month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfCredits"]) -> MetaOapg.properties.numberOfCredits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCreditsAmount"]) -> MetaOapg.properties.totalCreditsAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["largestCredit"]) -> MetaOapg.properties.largestCredit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfCreditsLessTransfers"]) -> MetaOapg.properties.numberOfCreditsLessTransfers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCreditsAmountLessTransfers"]) -> MetaOapg.properties.totalCreditsAmountLessTransfers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["averageCreditAmount"]) -> MetaOapg.properties.averageCreditAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estimatedNumberOfLoanDeposits"]) -> MetaOapg.properties.estimatedNumberOfLoanDeposits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estimatedLoanDepositAmount"]) -> MetaOapg.properties.estimatedLoanDepositAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["month", "numberOfCredits", "totalCreditsAmount", "largestCredit", "numberOfCreditsLessTransfers", "totalCreditsAmountLessTransfers", "averageCreditAmount", "estimatedNumberOfLoanDeposits", "estimatedLoanDepositAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["month"]) -> MetaOapg.properties.month: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfCredits"]) -> MetaOapg.properties.numberOfCredits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCreditsAmount"]) -> MetaOapg.properties.totalCreditsAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["largestCredit"]) -> MetaOapg.properties.largestCredit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfCreditsLessTransfers"]) -> MetaOapg.properties.numberOfCreditsLessTransfers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCreditsAmountLessTransfers"]) -> MetaOapg.properties.totalCreditsAmountLessTransfers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["averageCreditAmount"]) -> MetaOapg.properties.averageCreditAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estimatedNumberOfLoanDeposits"]) -> MetaOapg.properties.estimatedNumberOfLoanDeposits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estimatedLoanDepositAmount"]) -> MetaOapg.properties.estimatedLoanDepositAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["month", "numberOfCredits", "totalCreditsAmount", "largestCredit", "numberOfCreditsLessTransfers", "totalCreditsAmountLessTransfers", "averageCreditAmount", "estimatedNumberOfLoanDeposits", "estimatedLoanDepositAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        averageCreditAmount: typing.Union[MetaOapg.properties.averageCreditAmount, decimal.Decimal, int, float, ],
        estimatedNumberOfLoanDeposits: typing.Union[MetaOapg.properties.estimatedNumberOfLoanDeposits, str, ],
        month: typing.Union[MetaOapg.properties.month, decimal.Decimal, int, ],
        estimatedLoanDepositAmount: typing.Union[MetaOapg.properties.estimatedLoanDepositAmount, decimal.Decimal, int, float, ],
        numberOfCredits: typing.Union[MetaOapg.properties.numberOfCredits, str, ],
        largestCredit: typing.Union[MetaOapg.properties.largestCredit, decimal.Decimal, int, float, ],
        totalCreditsAmount: typing.Union[MetaOapg.properties.totalCreditsAmount, decimal.Decimal, int, float, ],
        numberOfCreditsLessTransfers: typing.Union[MetaOapg.properties.numberOfCreditsLessTransfers, str, ],
        totalCreditsAmountLessTransfers: typing.Union[MetaOapg.properties.totalCreditsAmountLessTransfers, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CashFlowMonthlyCashFlowCredits':
        return super().__new__(
            cls,
            *args,
            averageCreditAmount=averageCreditAmount,
            estimatedNumberOfLoanDeposits=estimatedNumberOfLoanDeposits,
            month=month,
            estimatedLoanDepositAmount=estimatedLoanDepositAmount,
            numberOfCredits=numberOfCredits,
            largestCredit=largestCredit,
            totalCreditsAmount=totalCreditsAmount,
            numberOfCreditsLessTransfers=numberOfCreditsLessTransfers,
            totalCreditsAmountLessTransfers=totalCreditsAmountLessTransfers,
            _configuration=_configuration,
            **kwargs,
        )
