# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class AccountDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            interestMarginBalance = schemas.NumberSchema
            availableCashBalance = schemas.NumberSchema
            vestedBalance = schemas.NumberSchema
            currentLoanBalance = schemas.NumberSchema
            availableBalanceAmount = schemas.NumberSchema
            __annotations__ = {
                "interestMarginBalance": interestMarginBalance,
                "availableCashBalance": availableCashBalance,
                "vestedBalance": vestedBalance,
                "currentLoanBalance": currentLoanBalance,
                "availableBalanceAmount": availableBalanceAmount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interestMarginBalance"]) -> MetaOapg.properties.interestMarginBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableCashBalance"]) -> MetaOapg.properties.availableCashBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vestedBalance"]) -> MetaOapg.properties.vestedBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentLoanBalance"]) -> MetaOapg.properties.currentLoanBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableBalanceAmount"]) -> MetaOapg.properties.availableBalanceAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["interestMarginBalance", "availableCashBalance", "vestedBalance", "currentLoanBalance", "availableBalanceAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interestMarginBalance"]) -> typing.Union[MetaOapg.properties.interestMarginBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableCashBalance"]) -> typing.Union[MetaOapg.properties.availableCashBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vestedBalance"]) -> typing.Union[MetaOapg.properties.vestedBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentLoanBalance"]) -> typing.Union[MetaOapg.properties.currentLoanBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableBalanceAmount"]) -> typing.Union[MetaOapg.properties.availableBalanceAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["interestMarginBalance", "availableCashBalance", "vestedBalance", "currentLoanBalance", "availableBalanceAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        interestMarginBalance: typing.Union[MetaOapg.properties.interestMarginBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        availableCashBalance: typing.Union[MetaOapg.properties.availableCashBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        vestedBalance: typing.Union[MetaOapg.properties.vestedBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currentLoanBalance: typing.Union[MetaOapg.properties.currentLoanBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        availableBalanceAmount: typing.Union[MetaOapg.properties.availableBalanceAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccountDetails':
        return super().__new__(
            cls,
            *args,
            interestMarginBalance=interestMarginBalance,
            availableCashBalance=availableCashBalance,
            vestedBalance=vestedBalance,
            currentLoanBalance=currentLoanBalance,
            availableBalanceAmount=availableBalanceAmount,
            _configuration=_configuration,
            **kwargs,
        )
