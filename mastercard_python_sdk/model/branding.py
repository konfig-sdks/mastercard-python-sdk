# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class Branding(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    All assets are SVGs so can be slightly resized without any issues.
    """


    class MetaOapg:
        
        class properties:
            logo = schemas.StrSchema
            alternateLogo = schemas.StrSchema
            icon = schemas.StrSchema
            primaryColor = schemas.StrSchema
            tile = schemas.StrSchema
            __annotations__ = {
                "logo": logo,
                "alternateLogo": alternateLogo,
                "icon": icon,
                "primaryColor": primaryColor,
                "tile": tile,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo"]) -> MetaOapg.properties.logo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alternateLogo"]) -> MetaOapg.properties.alternateLogo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icon"]) -> MetaOapg.properties.icon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryColor"]) -> MetaOapg.properties.primaryColor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tile"]) -> MetaOapg.properties.tile: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["logo", "alternateLogo", "icon", "primaryColor", "tile", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo"]) -> typing.Union[MetaOapg.properties.logo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alternateLogo"]) -> typing.Union[MetaOapg.properties.alternateLogo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icon"]) -> typing.Union[MetaOapg.properties.icon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryColor"]) -> typing.Union[MetaOapg.properties.primaryColor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tile"]) -> typing.Union[MetaOapg.properties.tile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["logo", "alternateLogo", "icon", "primaryColor", "tile", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        logo: typing.Union[MetaOapg.properties.logo, str, schemas.Unset] = schemas.unset,
        alternateLogo: typing.Union[MetaOapg.properties.alternateLogo, str, schemas.Unset] = schemas.unset,
        icon: typing.Union[MetaOapg.properties.icon, str, schemas.Unset] = schemas.unset,
        primaryColor: typing.Union[MetaOapg.properties.primaryColor, str, schemas.Unset] = schemas.unset,
        tile: typing.Union[MetaOapg.properties.tile, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Branding':
        return super().__new__(
            cls,
            *args,
            logo=logo,
            alternateLogo=alternateLogo,
            icon=icon,
            primaryColor=primaryColor,
            tile=tile,
            _configuration=_configuration,
            **kwargs,
        )
