# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class ObbReportHeader(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details about the business the report is generated for and metadata about the report
    """


    class MetaOapg:
        required = {
            "reportDate",
            "reportId",
        }
        
        class properties:
            
            
            class reportDate(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 25
                    min_length = 25
            
            
            class reportId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class businessAddress(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class businessCity(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class businessName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class businessState(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class businessZip(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class referenceNumber(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            __annotations__ = {
                "reportDate": reportDate,
                "reportId": reportId,
                "businessAddress": businessAddress,
                "businessCity": businessCity,
                "businessName": businessName,
                "businessState": businessState,
                "businessZip": businessZip,
                "referenceNumber": referenceNumber,
            }
    
    reportDate: MetaOapg.properties.reportDate
    reportId: MetaOapg.properties.reportId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportDate"]) -> MetaOapg.properties.reportDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportId"]) -> MetaOapg.properties.reportId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessAddress"]) -> MetaOapg.properties.businessAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessCity"]) -> MetaOapg.properties.businessCity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessName"]) -> MetaOapg.properties.businessName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessState"]) -> MetaOapg.properties.businessState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessZip"]) -> MetaOapg.properties.businessZip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["referenceNumber"]) -> MetaOapg.properties.referenceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reportDate", "reportId", "businessAddress", "businessCity", "businessName", "businessState", "businessZip", "referenceNumber", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportDate"]) -> MetaOapg.properties.reportDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportId"]) -> MetaOapg.properties.reportId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessAddress"]) -> typing.Union[MetaOapg.properties.businessAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessCity"]) -> typing.Union[MetaOapg.properties.businessCity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessName"]) -> typing.Union[MetaOapg.properties.businessName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessState"]) -> typing.Union[MetaOapg.properties.businessState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessZip"]) -> typing.Union[MetaOapg.properties.businessZip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["referenceNumber"]) -> typing.Union[MetaOapg.properties.referenceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reportDate", "reportId", "businessAddress", "businessCity", "businessName", "businessState", "businessZip", "referenceNumber", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reportDate: typing.Union[MetaOapg.properties.reportDate, str, ],
        reportId: typing.Union[MetaOapg.properties.reportId, str, ],
        businessAddress: typing.Union[MetaOapg.properties.businessAddress, str, schemas.Unset] = schemas.unset,
        businessCity: typing.Union[MetaOapg.properties.businessCity, str, schemas.Unset] = schemas.unset,
        businessName: typing.Union[MetaOapg.properties.businessName, str, schemas.Unset] = schemas.unset,
        businessState: typing.Union[MetaOapg.properties.businessState, str, schemas.Unset] = schemas.unset,
        businessZip: typing.Union[MetaOapg.properties.businessZip, str, schemas.Unset] = schemas.unset,
        referenceNumber: typing.Union[MetaOapg.properties.referenceNumber, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObbReportHeader':
        return super().__new__(
            cls,
            *args,
            reportDate=reportDate,
            reportId=reportId,
            businessAddress=businessAddress,
            businessCity=businessCity,
            businessName=businessName,
            businessState=businessState,
            businessZip=businessZip,
            referenceNumber=referenceNumber,
            _configuration=_configuration,
            **kwargs,
        )
