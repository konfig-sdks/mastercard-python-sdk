# coding: utf-8

"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Created by: https://developer.mastercard.com/open-banking-us/documentation/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mastercard_python_sdk import schemas  # noqa: F401


class ReportAccountPosition(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.NumberSchema
            currency = schemas.StrSchema
            symbol = schemas.StrSchema
            securityName = schemas.StrSchema
            units = schemas.NumberSchema
            marketValue = schemas.NumberSchema
            currentPrice = schemas.NumberSchema
            securityType = schemas.NumberSchema
            __annotations__ = {
                "id": id,
                "currency": currency,
                "symbol": symbol,
                "securityName": securityName,
                "units": units,
                "marketValue": marketValue,
                "currentPrice": currentPrice,
                "securityType": securityType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityName"]) -> MetaOapg.properties.securityName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["marketValue"]) -> MetaOapg.properties.marketValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentPrice"]) -> MetaOapg.properties.currentPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityType"]) -> MetaOapg.properties.securityType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "currency", "symbol", "securityName", "units", "marketValue", "currentPrice", "securityType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityName"]) -> typing.Union[MetaOapg.properties.securityName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> typing.Union[MetaOapg.properties.units, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["marketValue"]) -> typing.Union[MetaOapg.properties.marketValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentPrice"]) -> typing.Union[MetaOapg.properties.currentPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityType"]) -> typing.Union[MetaOapg.properties.securityType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "currency", "symbol", "securityName", "units", "marketValue", "currentPrice", "securityType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        symbol: typing.Union[MetaOapg.properties.symbol, str, schemas.Unset] = schemas.unset,
        securityName: typing.Union[MetaOapg.properties.securityName, str, schemas.Unset] = schemas.unset,
        units: typing.Union[MetaOapg.properties.units, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        marketValue: typing.Union[MetaOapg.properties.marketValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currentPrice: typing.Union[MetaOapg.properties.currentPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        securityType: typing.Union[MetaOapg.properties.securityType, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportAccountPosition':
        return super().__new__(
            cls,
            *args,
            id=id,
            currency=currency,
            symbol=symbol,
            securityName=securityName,
            units=units,
            marketValue=marketValue,
            currentPrice=currentPrice,
            securityType=securityType,
            _configuration=_configuration,
            **kwargs,
        )
